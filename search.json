[{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/pathviewr/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/pathviewr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look GitHub Actions build status making changes. README contain badges continuous integration services used package. recommend tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://docs.ropensci.org/pathviewr/CONTRIBUTING.html","id":"see-ropensci-contributing-guide","dir":"","previous_headings":"","what":"See rOpenSci contributing guide","title":"CONTRIBUTING","text":"details.","code":""},{"path":"https://docs.ropensci.org/pathviewr/CONTRIBUTING.html","id":"discussion-forum","dir":"","previous_headings":"","what":"Discussion forum","title":"CONTRIBUTING","text":"Check discussion forum question, use case, otherwise bug feature request software . think issue requires longer form discussion.","code":""},{"path":"https://docs.ropensci.org/pathviewr/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://docs.ropensci.org/pathviewr/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/pathviewr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"pathviewr: Tools to import, clean, and visualize animal movement data in R.  Copyright (C) 2020 Vikram B. Baliga; Melissa S. Armstrong; Eric R. Press  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. pathviewr Copyright (C) 2020 Vikram B. Baliga; Melissa S. Armstrong; Eric R. Press This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Basics of data import and cleaning in pathviewr","text":"Raw movement data, including motion capture systems, may variety issues. raw data often contain noise artifacts recording session, may easily removed via recording software . Data may organized “tidy” key-value pairs (making plotting difficult), axes overall orientation environment may conform standard, individual movement trajectories may ill-defined. pathviewr provides functions R deal problems (.e. “cleaning”). vignette cover basics import raw data clean data prepare visualization /statistical analyses.","code":""},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"what-do-movement-data-sets-look-like","dir":"Articles","previous_headings":"","what":"What do movement data sets look like?","title":"Basics of data import and cleaning in pathviewr","text":"minimum, movement data provide information subject object’s position time. data typically supplied three dimensions (e.g. x, y, z), position dimension sampled particular rate (e.g. 100 Hz). Different recording software may provide additional features, ability track multiple subjects simultaneously, information subjects’ rotation, tracking “rigid body” elements, even ability apply Kalman filters. central goal pathviewr take data different sources (far: Motive Flydra), re-organize common format can wrangled R, clean bit, get ready visualization /statistical analyses. ’ll first cover ’s included Motive Flydra data pathviewr handles . data another source, as_viewr() function allow bring pathviewr framework.","code":""},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"data-import-via-pathviewr","dir":"Articles","previous_headings":"","what":"Data import via pathviewr","title":"Basics of data import and cleaning in pathviewr","text":"Data can imported via one three functions: read_motive_csv() imports data .csv files exported Optitrack’s Motive software read_flydra_mat() imports data .mat files exported Flydra as_viewr() can used handle data sources showcase examples methods section. Please feel free reach pathviewr authors via Github Issues page trouble data import options. happy work design custom read_ functions file types encountered . ’ll start loading pathviewr packages tidyverse.","code":"## If you do not already have pathviewr installed: # install.packages(\"devtools\") # devtools::install_github(\"ropensci/pathviewr\")  library(pathviewr) library(ggplot2) library(magrittr)"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"motive-csv-files","dir":"Articles","previous_headings":"Data import via pathviewr","what":"Motive CSV files","title":"Basics of data import and cleaning in pathviewr","text":".csv files exported Motive can imported via read_motive_csv() key thing note data, stored Motive CSVs, “tidy”. frame occupies one row, also means rotation position values various subjects take 24 columns! format makes plotting data difficult base R, ggplot2, rgl, also makes aspects data wrangling difficult. later step, ‘gather’ data key-value pairs e.g. length-wise position values one column, width-wise another…etc. Metadata stored attributes. won’t go , couple important ones. Storing metatdata attributes key feature pathviewr. metadata may immediately important time series position rotation, can provide important experimental information date & time capture units position data (, meters).","code":"## Import the Motive example data included in  ## the package  motive_data <-   read_motive_csv(     system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                 package = 'pathviewr')   )  ## This produces a tibble  motive_data #> # A tibble: 934 × 26 #>    frame time_sec device02_rotation_x device02_rotation_y device02_rotation_z #>    <int>    <dbl>               <dbl>               <dbl>               <dbl> #>  1 72210     722.              0.135               -0.977             -0.112  #>  2 72211     722.              0.0819              -0.978             -0.0991 #>  3 72212     722.              0.211               -0.973             -0.0939 #>  4 72213     722.              0.196               -0.972             -0.128  #>  5 72214     722.              0.131               -0.975             -0.121  #>  6 72215     722.              0.0935              -0.975             -0.105  #>  7 72216     722.              0.180               -0.975             -0.106  #>  8 72217     722.              0.164               -0.972             -0.149  #>  9 72218     722.              0.120               -0.973             -0.149  #> 10 72219     722.              0.155               -0.970             -0.120  #> # ℹ 924 more rows #> # ℹ 21 more variables: device02_rotation_w <dbl>, device02_position_x <dbl>, #> #   device02_position_y <dbl>, device02_position_z <dbl>, #> #   device02_mean_marker_error <dbl>, device03_rotation_x <dbl>, #> #   device03_rotation_y <dbl>, device03_rotation_z <dbl>, #> #   device03_rotation_w <dbl>, device03_position_x <dbl>, #> #   device03_position_y <dbl>, device03_position_z <dbl>, … ## E.g. to see the header of the original file: attr(motive_data, \"header\") #>                 metadata                      value #> 1         Format Version                       1.23 #> 2              Take Name  sept-18_mixed-group_16-30 #> 3             Take Notes                            #> 4     Capture Frame Rate                 100.000000 #> 5      Export Frame Rate                 100.000000 #> 6     Capture Start Time 2019-09-18 04.30.02.695 PM #> 7   Total Frames in Take                     190951 #> 8  Total Exported Frames                     190951 #> 9          Rotation Type                 Quaternion #> 10          Length Units                     Meters #> 11      Coordinate Space                     Global  ## Names of all marked objects: attr(motive_data, \"subject_names_simple\") #> [1] \"device02\" \"device03\" \"device05\"  ## Types of data included attr(motive_data, \"data_types_simple\") #> [1] \"Rigid Body\"  ## Frame rate attr(motive_data, \"frame_rate\") #> [1] 100"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"flydra-matlab-files","dir":"Articles","previous_headings":"Data import via pathviewr","what":"Flydra Matlab files","title":"Basics of data import and cleaning in pathviewr","text":".mat files exported Flydra can imported via read_flydra_mat(). Note must supply subject_name Flydra data, subject names embedded .mat files. one name can added used throughout resultant tibble. Note unlike example Motive data, Flydra data already organized key-value pairs. rotation captured Flydra, data also included.","code":"## Import the Flydra example data included in  ## the package flydra_data <-   read_flydra_mat(     system.file(\"extdata\",                  \"pathviewr_flydra_example_data.mat\",                 package = 'pathviewr'),     subject_name = \"birdie_wooster\"   )  ## Similarly, this produces a tibble with important  ## metadata as attributes flydra_data #> # A tibble: 7,744 × 10 #>    frame time_sec subject        position_length position_width position_height #>    <dbl>    <dbl> <chr>                    <dbl>          <dbl>           <dbl> #>  1   746     0    birdie_wooster           0.869       -0.00417            1.31 #>  2   747     0.01 birdie_wooster           0.864       -0.00614            1.31 #>  3   748     0.02 birdie_wooster           0.863       -0.00695            1.31 #>  4   749     0.03 birdie_wooster           0.862       -0.00672            1.31 #>  5   750     0.04 birdie_wooster           0.862       -0.00644            1.31 #>  6   751     0.05 birdie_wooster           0.862       -0.00619            1.31 #>  7   752     0.06 birdie_wooster           0.863       -0.00667            1.31 #>  8   753     0.07 birdie_wooster           0.864       -0.00712            1.31 #>  9   754     0.08 birdie_wooster           0.865       -0.00727            1.31 #> 10   755     0.09 birdie_wooster           0.865       -0.00760            1.31 #> # ℹ 7,734 more rows #> # ℹ 4 more variables: velocity <dbl>, length_inst_vel <dbl>, #> #   width_inst_vel <dbl>, height_inst_vel <dbl>  attr(flydra_data, \"frame_rate\") #> [1] 100"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"data-from-other-sources","dir":"Articles","previous_headings":"Data import via pathviewr","what":"Data from other sources","title":"Basics of data import and cleaning in pathviewr","text":"Data another format can converted viewr object via pathviewr::as_viewr(). Although function handle data import per se, allows data may already imported R tibble data.frame reformatted use pathviewr functions. ’ll run quick example simulated data: also welcome request custom data import functions, especially as_viewr() fit needs. interested expanding data import functions accommodate additional file types. Please feel free file request additional import functions via Github Issues page.","code":"## Create a dummy data frame with simulated (nonsense) data df <-   data.frame(     frame = seq(1, 100, by = 1),     time_sec = seq(0, by = 0.01, length.out = 100),     subject = \"birdie_sanders\",     z = rnorm(100),     x = rnorm(100),     y = rnorm(100)   )  ## Use as_viewr() to convert it into a viewr object test <-   as_viewr(     df,     frame_rate = 100,     frame_col = 1,     time_col = 2,     subject_col = 3,     position_length_col = 5,     position_width_col = 6,     position_height_col = 4   )  ## Some metadata are stored as attributes attr(test, \"frame_rate\") #> [1] 100"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"data-cleaning","dir":"Articles","previous_headings":"","what":"Data cleaning","title":"Basics of data import and cleaning in pathviewr","text":"noted , raw data often suffer following: - contain noise artifacts recording session - organized “tidy” key-value pairs - axes overall orientation environment may conform standard - individual movement trajectories may ill-defined Several functions clean wrangle data available, suggested pipeline steps handled. rest vignette cover steps. steps suggested pipeline also covered two --one functions: clean_viewr() import_and_clean_viewr(). See section end vignette details. speaking pipes, functions pathviewr pipe-friendly. detail step separately, subsequent steps may piped, e.g. data %>% relabel_viewr_axes() %>% gather_tunnel_data() etc etc","code":""},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"relabeling-axes-gathering-data-columns-and-trimming-outliers","dir":"Articles","previous_headings":"Data cleaning","what":"Relabeling axes, gathering data columns, and trimming outliers","title":"Basics of data import and cleaning in pathviewr","text":"Axis labels (x, y, z) may applied arbitrary ways software. user might intuitively think z axis represents height, original software may label y axis instead. relabel_viewr_axes provides means relabel axes “tunnel_length”, “tunnel_width”, “tunnel_height”. axis labels expected subsequent functions, skipping step ill-advised. Typically, axes Motive data need relabled, axes data imported Flydra . Akin behavior dplyr::gather(), gather_tunnel_data() take data given session organize data given type within one column, .e. position lengths position_length, opposed separate length columns rigid body. column names expected subsequent functions, skipping step also ill-advised using data Motive. data Flydra, step skipable. Use trim_tunnel_outliers() remove extreme artifacts outlier data. function create (virtual) boundary box according user-specification, data outside boundary removed. example, know arena measures 10m x 10m x 10m data calibrated range 0-10m dimension, can reasonably sure extreme values 45m given axis bogus. step entirely optional, used user confident data outside certain ranges artifacts bugs. Data outside ranges filtered . Best plot data beforehand check!!","code":"motive_relabeled <-   motive_data %>%   relabel_viewr_axes(     tunnel_length = \"_z\",     tunnel_width = \"_x\",     tunnel_height = \"_y\",     real = \"_w\"   )  names(motive_relabeled) #>  [1] \"frame\"                      \"time_sec\"                   #>  [3] \"device02_rotation_width\"    \"device02_rotation_height\"   #>  [5] \"device02_rotation_length\"   \"device02_rotation_real\"     #>  [7] \"device02_position_width\"    \"device02_position_height\"   #>  [9] \"device02_position_length\"   \"device02_mean_marker_error\" #> [11] \"device03_rotation_width\"    \"device03_rotation_height\"   #> [13] \"device03_rotation_length\"   \"device03_rotation_real\"     #> [15] \"device03_position_width\"    \"device03_position_height\"   #> [17] \"device03_position_length\"   \"device03_mean_marker_error\" #> [19] \"device05_rotation_width\"    \"device05_rotation_height\"   #> [21] \"device05_rotation_length\"   \"device05_rotation_real\"     #> [23] \"device05_position_width\"    \"device05_position_height\"   #> [25] \"device05_position_length\"   \"device05_mean_marker_error\" ## First gather and show the new column names motive_gathered <-   motive_relabeled %>%   gather_tunnel_data()  names(motive_gathered) #>  [1] \"frame\"             \"time_sec\"          \"subject\"           #>  [4] \"position_length\"   \"position_width\"    \"position_height\"   #>  [7] \"rotation_length\"   \"rotation_width\"    \"rotation_height\"   #> [10] \"rotation_real\"     \"mean_marker_error\"  ## Now trim, using ranges we know to safely include data ## and exclude artifacts. Anything outside these ranges  ## will be removed. motive_trimmed <-   motive_gathered %>%   trim_tunnel_outliers(     lengths_min = 0,     lengths_max = 3,     widths_min = -0.4,     widths_max = 0.8,     heights_min = -0.2,     heights_max = 0.5   )"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"standardization-of-tunnel-position-and-coordinates","dir":"Articles","previous_headings":"Data cleaning","what":"Standardization of tunnel position and coordinates","title":"Basics of data import and cleaning in pathviewr","text":"coordinate system tunnel may require adjustment standardization. example, data collected across different days may show slight differences coordinate systems calibration equipment used identical ways. Moreover, user may want redefine coordinate system defined (.e. change location (0, 0, 0) another place within tunnel. Note (0, 0, 0) set center region interest (covered next section vignette) required subsequent pathviewr functions work. pathviewr offers three main choices standardization: redefine_tunnel_center(): Sets location 0 axes new location. See Help page function see four different methods user can specify . rotation tunnel performed. function can used Motive Flydra data. standardize_tunnel(): Use specified landmarks (subjects within viewr object) rotate translate location tunnel, setting (0, 0, 0) center tunnel (centering). example, avian flight tunnel, perches may set opposite ends tunnel rigid body markers may set . positions perches can used landmarks standardize tunnel position. Note typically possible Flydra data, since Flydra data imported one subject. rotate_tunnel: Rotate center tunnel based user-defined coordinates (.e. similar standardize_tunnel() cases specified landmarks data). function can used Motive Flydra data. Two quick examples follow, using Motive Flydra data: , virtual perches defined user using arguments shown. center perch found locations two perch centers used 1) set (0, 0, 0) point equidistant perches (.e. middle tunnel) 2) rotate tunnel height axis perch width coordinates 0. may easier understand plotting:   Differences due rotation may extremely subtle, redefining (0, 0, 0) middle tunnel clear contrasting axes plots. Flydra data typically need rotated, instead use redefine_tunnel_center() adjust location (0, 0, 0): , using length_method = \"middle\" use middle range “length” data set length = 0 (translation), making change width axis, specifying height = 0 equal value 1.44 original data (another translation). , plotting may help; note time, ’ll plot length x height (instead width):","code":"## Rotate and center the motive data set: motive_rotated <-   motive_trimmed %>%    rotate_tunnel(     perch1_len_min = -0.06,     perch1_len_max = 0.06,     perch2_len_min = 2.48,     perch2_len_max = 2.6,     perch1_wid_min = 0.09,     perch1_wid_max = 0.31,     perch2_wid_min = 0.13,     perch2_wid_max = 0.35   ) ## Quick (base-R) plot of the original data plot(motive_trimmed$position_length,      motive_trimmed$position_width,      asp = 1) ## Quick (base-R) plot of the rotated data plot(motive_rotated$position_length,      motive_rotated$position_width,      asp = 1) ## Re-center the Flydra data set: flydra_centered <-   flydra_data %>%   redefine_tunnel_center(length_method = \"middle\",                          height_method = \"user-defined\",                          height_zero = 1.44) ## Quick (base-R) plot of the original data plot(flydra_data$position_length,      flydra_data$position_height,      asp = 1) ## Quick (base-R) plot of the redefined data plot(flydra_centered$position_length,      flydra_centered$position_height,      asp = 1)"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"selecting-a-region-of-interest","dir":"Articles","previous_headings":"Data cleaning","what":"Selecting a region of interest","title":"Basics of data import and cleaning in pathviewr","text":"required step benefits twofold: 1) treatment effects animal movement may manifest certain regions tunnel, 2) focusing subset data makes easier define explicit trajectories run computations faster. region interest defined via function select_x_percent(). tunnel coordinates standardized (via one function previous section), select_x_percent() selects middle x percent (along length axis) tunnel region interest. example, selecting 50 percent start center tunnel move 25% tunnel along positive length 25% along negative length values select middle 50% tunnel. Quick examples:","code":"## Motive data: select the middle 50% of the tunnel as the region of interest motive_selected <-   motive_rotated %>% select_x_percent(50)  ## Quick plot: plot(motive_selected$position_length,      motive_selected$position_width,      asp = 1) ## Flydra data: flydra_selected <-   flydra_centered %>% select_x_percent(50)  ## Quick plot: plot(flydra_selected$position_length,      flydra_selected$position_width,      asp = 1)"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"isolating-each-trajectory","dir":"Articles","previous_headings":"Data cleaning","what":"Isolating each trajectory","title":"Basics of data import and cleaning in pathviewr","text":"pathviewr standard defining trajectory : continuous movement one side tunnel span region interest. Note definition strictly require linear movement one end ; animal make several loops inside region interest within given trajectory. Isolating trajectories handled via separate_trajectories() function pathviewr. Note region interest must selected beforehand via select_x_percent(). cameras may occasionally drop frames, allow user permit relaxation stringent “continuous movement” criterion . handled via max_frame_gap argument within separate_trajectories(). details, please see vignette Managing frame gaps pathviewr. Motive example, ’ll use automated feature built function guesstimate best max_frame_gap allowed. frame gaps larger max_frame_gap encountered, function force defining new trajectory. frame gaps smaller max_frame_gap encountered, keeping observations within trajectory permitted. Flydra example, ’ll simply set max_frame_gap 1 frame gaps allowed (movement must continuous dropped frames).","code":"motive_labeled <-   motive_selected %>%    separate_trajectories(max_frame_gap = \"autodetect\") #> autodetect is an experimental feature -- please report issues.  flydra_labeled <-   flydra_selected %>%    separate_trajectories(max_frame_gap = 1)"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"retain-only-complete-trajectories","dir":"Articles","previous_headings":"Data cleaning","what":"Retain only complete trajectories","title":"Basics of data import and cleaning in pathviewr","text":"Now trajectories isolated labeled, final cleaning step retain trajectories completely span one end region interest . final step handled via pathviewr’s get_full_trajectories(). built-“fuzziness” feature: trajectories may observations exactly beginning end region interest, may necessary allow trajectories slightly shorter range selected region interest. span parameter function handles . supplying numeric proportion 0 1, user may allow trajectories span proportion selected region. example, setting span = 0.95 keep trajectories span 95% length selected region interest. Setting span = 1 (recommended) strictly keep trajectories start end exact cut-offs selected region interest. reasons, spans 0.99 0.95 generally recommended. best choice ultimately depends capture frame rate well judgment. desire set lower (can), may instead consider using smaller region interest (.e. set desired_percent parameter select_x_percent() lower).","code":"## Motive motive_full <-   motive_labeled %>%    get_full_trajectories(span = 0.95)  plot(motive_full$position_length,      motive_full$position_width,      asp = 1, col = as.factor(motive_full$file_sub_traj)) ## Flydra flydra_full <-   flydra_labeled %>%    get_full_trajectories(span = 0.95)  plot(flydra_full$position_length,      flydra_full$position_width,      asp = 1, col = as.factor(flydra_full$file_sub_traj))"},{"path":"https://docs.ropensci.org/pathviewr/articles/data-import-cleaning.html","id":"all-in-one-cleaning-functions","dir":"Articles","previous_headings":"Data cleaning","what":"All-in-one cleaning functions","title":"Basics of data import and cleaning in pathviewr","text":"steps can also done using pathviewr’s designated --one functions. import_and_clean_viewr() imports raw data allows user run cleaning steps previously covered vignette. clean_viewr() object already imported R environment (.e. skips data import). functions, cleaning steps set TRUE default, may turned using FALSE. Argument names correspond standalone functions pathviewr, user wants use non-default values corresponding arguments, also supplied steps set TRUE. example, user keeps select_x_percent = TRUE argument clean_viewr(), select_x_percent() function run internally. means user desire select region interest match default value 33 percent, additional argument supplied clean_viewr() supplied select_x_percent() , e.g.: desired_percent = 50. additional arguments written fully explicitly. ’s example using previously covered:  ’s ! 🐢","code":"motive_allinone <-   motive_data %>%   clean_viewr(     relabel_viewr_axes = TRUE,     gather_tunnel_data = TRUE,     trim_tunnel_outliers = TRUE,     standardization_option = \"rotate_tunnel\",     select_x_percent = TRUE,     desired_percent = 50,     rename_viewr_characters = FALSE,     separate_trajectories = TRUE,     max_frame_gap = \"autodetect\",     get_full_trajectories = TRUE,     span = 0.95   ) #> autodetect is an experimental feature -- please report issues.  ## Quick plot plot(motive_allinone$position_length,      motive_allinone$position_width,      asp = 1, col = as.factor(motive_allinone$file_sub_traj))"},{"path":"https://docs.ropensci.org/pathviewr/articles/managing-frame-gaps.html","id":"defining-trajectories-with-pathviewr","dir":"Articles","previous_headings":"","what":"Defining trajectories with pathviewr","title":"Managing frame gaps with pathviewr","text":"pathviewr defines trajectories continuous movement one side region interest . trajectories can defined, region interest must selected via select_x_percent() addition previous steps data import cleaning pipeline described Data Import Cleaning vignette. ’ll start loading pathviewr packages tidyverse importing data. ’ll quickly run cleanup pipeline using one pathviewr’s --one cleaning functions described Data Import Cleaning vignette. Since trajectories defined separate_trajectories() function, ’ll stop --one setting every step FALSE can take closer look trajectories defined. Since steps set TRUE default, don’t actually need list function, just want switch FALSE require additional arguments.","code":"## If you do not already have pathviewr installed: # install.packages(\"devtools\") # devtools::install_github(\"ropensci/pathviewr\")  library(pathviewr) library(ggplot2) library(magrittr)  ## Import the example Motive data included in  ## the package motive_data <-   read_motive_csv(     system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                 package = 'pathviewr')   ) motive_cleaned <-   motive_data %>%   clean_viewr(     desired_percent = 70,     rename_viewr_characters = FALSE,     separate_trajectories = FALSE,     get_full_trajectories = FALSE   )  ## Quick plot plot(motive_cleaned$position_length,      motive_cleaned$position_width,      asp = 1)"},{"path":"https://docs.ropensci.org/pathviewr/articles/managing-frame-gaps.html","id":"inspecting-the-data","dir":"Articles","previous_headings":"Defining trajectories with pathviewr","what":"Inspecting the data","title":"Managing frame gaps with pathviewr","text":"’ve cleaned data ready link individual data points continuous trajectories. Deciding exactly define trajectory depend largely quality data collected resolution required answer given question data. data fairly continuous high resolution required, default max_frame_gap = 1 allow frame gaps–movement must continuous.  Plotting trajectory reveals perhaps trajectories continuous split two separate trajectories dropped frame two. data may require relaxing stringent -frame-gaps requirement order link data points go together single trajectory. Let’s try setting max_frame_gap = 5.  increasing allowable frame gap, chunks data linked trajectories trajectory count dropped 335 224. hard see trajectories piled top , let’s go ahead run get_full_trajectories() clean bits data span region interest. inspect trajectory individually, can use plot_viewr_trajectories() function take closer look quality trajectory. can computationally expensive depending data set.","code":"motive_mfg1 <-    motive_cleaned %>%    separate_trajectories(     max_frame_gap = 1   )  ## Quick plot plot(motive_mfg1$position_length,      motive_mfg1$position_width,      asp = 1, col = as.factor(motive_mfg1$file_sub_traj)) ## How many trajectories do we end up with? length(unique(motive_mfg1$file_sub_traj)) #> [1] 16 motive_mfg5 <-    motive_cleaned %>%    separate_trajectories(     max_frame_gap = 5   )  ## Quick plot plot(motive_mfg5$position_length,      motive_mfg5$position_width,      asp = 1, col = as.factor(motive_mfg5$file_sub_traj)) ## How many trajectories do we end up with? length(unique(motive_mfg5$file_sub_traj)) #> [1] 13 motive_mfg5_full <-    motive_mfg5 %>%    get_full_trajectories(     span = .6   )  ## Quick plot plot(motive_mfg5_full$position_length,      motive_mfg5_full$position_width,      asp = 1, col = as.factor(motive_mfg5_full$file_sub_traj)) ## How many trajectories do we end up with? length(unique(motive_mfg5_full$file_sub_traj)) #> [1] 10  ## Plot each trajectory plot_viewr_trajectories(motive_mfg5_full,                         plot_axes = c(\"length\", \"width\"),                         multi_plot = TRUE)"},{"path":"https://docs.ropensci.org/pathviewr/articles/managing-frame-gaps.html","id":"visualize-frame-gap-choice","dir":"Articles","previous_headings":"Defining trajectories with pathviewr","what":"Visualize frame gap choice","title":"Managing frame gaps with pathviewr","text":"pathviewr several tools help users decide frame gap allowances may appropriate depending data resolution needs. visualize_frame_gap_choice() runs separate_trajectories() function data set many times user like via loop argument, time different max_frame_gap allowance. loop represents increase max frame gap value 1. example default loops = 20 run separate_trajectories() data set 20 times, increase max_frame_gap argument 1 time.  output visualize_frame_gap_choice() tibble plot number trajectories running separate_trajectories() max_frame_gap = 1, max_frame_gap = 2, max_frame_gap = 3, etc. can see frame gap allowance increases, bits data linked continuous trajectories thus total number trajectories decreases. vertical line plot indicates “elbow” plot point counts trajectories appear stabilize increases max_frame_gap allowance longer effect trajectory count much.","code":"motive_cleaned %>%    visualize_frame_gap_choice(     loops = 20   ) #> [[1]] #> # A tibble: 20 × 3 #>    frame_gap_allowed trajectory_count file_id #>                <dbl>            <dbl> <chr>   #>  1                 1               14 .       #>  2                 2               11 .       #>  3                 3               11 .       #>  4                 4               11 .       #>  5                 5               11 .       #>  6                 6               11 .       #>  7                 7               11 .       #>  8                 8               11 .       #>  9                 9               11 .       #> 10                10               11 .       #> 11                11               11 .       #> 12                12               11 .       #> 13                13               11 .       #> 14                14               11 .       #> 15                15               11 .       #> 16                16               11 .       #> 17                17               11 .       #> 18                18               11 .       #> 19                19               11 .       #> 20                20               11 .       #>  #> [[2]] #> NULL"},{"path":"https://docs.ropensci.org/pathviewr/articles/managing-frame-gaps.html","id":"autodetect","dir":"Articles","previous_headings":"Defining trajectories with pathviewr","what":"Autodetect","title":"Managing frame gaps with pathviewr","text":"Setting max_frame_gap = \"autodetect\" rather numeric value uses “elbow” plots visualize_frame_gap_choice() guesstimate best value(s) max_frame_gap. addition automatically selecting max_frame_gap depending data, autodetect per subject basis rather applying allowable frame gap data data set since frame gaps can vary subjects. cap high max_frame_gap can go defined proportion capture frame rate set frame_rate_proportion argument, defaults .10.   sample data 3 subjects frame_gap_messaging = TRUE, max_frame_gap subject reported (default FALSE). frame_gap_plotting = TRUE display elbow plots subject, also defaults FALSE.","code":"motive_auto <-    motive_cleaned %>%    separate_trajectories(     max_frame_gap = \"autodetect\",     frame_rate_proportion = 0.1,     frame_gap_messaging = TRUE,     frame_gap_plotting = TRUE   ) #> autodetect is an experimental feature -- please report issues. #> For subject: device02, estimated best value for max_frame_gap: 1 #> For subject: device03, estimated best value for max_frame_gap: 2 #> For subject: device05, estimated best value for max_frame_gap: 2 ## How many trajectories do we end up with? length(unique(motive_auto$file_sub_traj)) #> [1] 13"},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating visual perceptions from tracking data","text":"Studies visually guided locomotion birds, insects even humans often involve data gathered motion capture technologies Optitrack’s (Motive), Straw Lab’s (Flydra). experiments, important understand visual stimuli influence behavior. Although possible measure subjects directly perceive visual stimuli, possible use motion capture data calculate estimates stimulus properties perceived subject. tools available pathviewr, researchers ethology psychology may provide analyses stimulus response natural locomotor conditions. Inherent estimations visual perceptions, make several assumptions, discussed . welcome suggestions aim address assumptions limit accuracy estimates. bridge gap objective measures subject position estimates subjective stimulus perception, can begin calculating angle visual pattern subtends subject’s retina: visual angle (θ). Visual angles can used calculate aspects image motion rate visual expansion (Dakin et al., 2016). detailed review different forms visual motion ’re processed brain, see (Frost, 2010). Visual angles can calculated provided information physical size pattern distance subject’s retina. researchers can control measure size pattern, can calculate distance subject pattern using motion capture data, can calculate visual angle produced patterns visual scene. Therefore, first need calculate distance subject’s retina pattern. Currently, assume subject’s gaze directly frontal lateral face, effect estimating image properties single points frontal lateral fields view, respectively. currently calculate distances center subject’s head rather position retina; future versions pathviewr include features addressing limitations, including head orientation information eye position relative center subject’s head. Visual angles can calculated using size visual pattern (stim_param) distance pattern. Larger patterns shorter distances produce larger visual angles. dot stimuli, visual angles can calculated independent stimulus orientation.","code":""},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading packages","title":"Estimating visual perceptions from tracking data","text":"begin, let’s load pathviewr packages tidyverse.","code":"library(pathviewr) library(ggplot2) library(magrittr)"},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data preparation","title":"Estimating visual perceptions from tracking data","text":"Data objects must prepared described Data Import Cleaning vignette pipeline prior use functions. detailed description importing cleaning functions, use , please see linked vignette. Let’s work example datasets included package. pathviewr_motive_example_data.csv .csv file exported Motive. pathviewr_flydra_example_data.mat .mat file exported Flydra. coarse-grained data cleaning tasks, pathviewr contains --one cleaning function clean_viewr. use function following examples.","code":"## Import motive data set motive_data <- # import   read_motive_csv(     system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                 package = 'pathviewr')   )  ## Clean motive data set motive_full <-   motive_data %>%   clean_viewr(     relabel_viewr_axes = TRUE,     gather_tunnel_data = TRUE,     trim_tunnel_outliers = TRUE,     standardization_option = \"rotate_tunnel\",     select_x_percent = TRUE,     desired_percent = 50,     rename_viewr_characters = FALSE,     separate_trajectories = TRUE,     max_frame_gap = \"autodetect\",     get_full_trajectories = TRUE,     span = 0.95   ) #> autodetect is an experimental feature -- please report issues. ## Import flydra data set flydra_data <-    read_flydra_mat(     system.file(\"extdata\", \"pathviewr_flydra_example_data.mat\",                 package = 'pathviewr'),     subject_name = \"birdie_wooster\")  ## Clean flydra data set flydra_full <-    flydra_data %>%   clean_viewr(     relabel_viewr_axes = FALSE,     gather_tunnel_data = FALSE,     trim_tunnel_outliers = FALSE,     standardization_option = \"redefine_tunnel_center\",     length_method = \"middle\",     height_method = \"user-defined\",     height_zero = 1.44,     get_velocity = FALSE,     select_x_percent = TRUE,     desired_percent = 60,     rename_viewr_characters = FALSE,     separate_trajectories = TRUE,     get_full_trajectories = TRUE   )"},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"add-experiment-information-with-insert_treatments","dir":"Articles","previous_headings":"","what":"Add experiment information with insert_treatments()","title":"Estimating visual perceptions from tracking data","text":"Now objects cleaned, must use insert_treatments() add information experiments, including relevant properties visual stimulus experimental tunnel necessary calculating visual perceptions. pathviewr currently supports rectangular (box) V-shaped experimental tunnels, though interested including additional tunnel configurations. like request additional features tunnel configurations, please create issue ()","code":""},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"v-shaped-tunnel-example","dir":"Articles","previous_headings":"Add experiment information with insert_treatments()","what":"V-shaped tunnel example","title":"Estimating visual perceptions from tracking data","text":"data within motive_full collected birds flying 3m long V-shaped tunnel height origin (0,0,0) set height perches 0.3855m vertex, angled 90 degree. visual stimuli positive negative walls tunnel (position_width values > 0 < 0, respectively) stationary dot-fields. dot size 0.05m diameter. visual stimuli positive negative end walls tunnel (position_length > 0 < 0, respectively) dot fields dots 0.1m diameter. treatment referred \"latB\". Therefore use following code: motive_treatments now variables tunnel_config, perch_2_vertex, vertex_angle, tunnel_length, stim_param_lat_pos, stim_param_lat_neg, stim_param_end_pos, stim_param_end_neg needed calculate visual angles. variable treatment also included information stored object’s metadata.","code":"motive_treatments <-    motive_full %>%    insert_treatments(tunnel_config = \"v\",                     perch_2_vertex = 0.3855,                     vertex_angle = 90,                     tunnel_length = 2,                     stim_param_lat_pos = 0.05,                     stim_param_lat_neg = 0.05,                     stim_param_end_pos = 0.1,                     stim_param_end_neg = 0.1,                     treatment = \"latB\") names(motive_treatments) #>  [1] \"tunnel_config\"      \"perch_2_vertex\"     \"vertex_angle\"       #>  [4] \"tunnel_length\"      \"stim_param_lat_pos\" \"stim_param_lat_neg\" #>  [7] \"stim_param_end_pos\" \"stim_param_end_neg\" \"treatment\"          #> [10] \"frame\"              \"time_sec\"           \"subject\"            #> [13] \"position_length\"    \"position_width\"     \"position_height\"    #> [16] \"rotation_length\"    \"rotation_width\"     \"rotation_height\"    #> [19] \"rotation_real\"      \"mean_marker_error\"  \"velocity\"           #> [22] \"length_inst_vel\"    \"width_inst_vel\"     \"height_inst_vel\"    #> [25] \"traj_id\"            \"file_sub_traj\"      \"traj_length\"        #> [28] \"start_length\"       \"end_length\"         \"length_diff\"        #> [31] \"start_length_sign\"  \"end_length_sign\"    \"direction\""},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"box-shaped-tunnel-example","dir":"Articles","previous_headings":"Add experiment information with insert_treatments()","what":"Box-shaped tunnel example","title":"Estimating visual perceptions from tracking data","text":"data within flydra_full collected birds flying 1 x 3m rectangular tunnel (box). visual stimuli motive example. flydra_treatments similarly variables tunnel_config, tunnel_width, tunnel_length, stim_param_lat_pos, stim_param_lat_neg, stim_param_end_pos, stim_param_end_neg treatment.","code":"flydra_treatments <-   flydra_full %>%   insert_treatments(tunnel_config = \"box\",                     tunnel_width = 1,                     tunnel_length = 3,                     stim_param_lat_pos = 0.05,                     stim_param_lat_neg = 0.05,                     stim_param_end_pos = 0.1,                     stim_param_end_neg = 0.1,                     treatment = \"latB\")"},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"start-by-calculating-distances-to-visual-stimuli","dir":"Articles","previous_headings":"Calculating visual angles","what":"Start by calculating distances to visual stimuli","title":"Estimating visual perceptions from tracking data","text":"estimate visual angles perceived subject moves tunnel, first need calculate distance subject visual stimuli. , use calc_min_dist_v calc_min_dist_box depending configuration experimental tunnel. functions calculate minimum distance subject surface displaying visual pattern, therefore maximizing visual angles. V-shaped tunnels, several internal calculations required can added output object simplify_output = FALSE. Otherwise, minimum distance computed lateral walls end wall subject facing.","code":"motive_min_dist <-    motive_treatments %>%    calc_min_dist_v(simplify_output = FALSE)  ## Display minimum distances to the positive lateral walls  ## Viewpoint is from the end of the tunnel motive_min_dist %>%    ggplot(aes(x = position_width, y = position_height)) +   geom_point(aes(color = min_dist_pos), size = 2, shape = 1) +   coord_fixed() +   theme_classic() +   geom_segment(aes(x = 0,         # positive wall                    y = -0.3855,                    xend = 0.5869,                    yend = 0.2014)) +   geom_segment(aes(x = 0,         # negative wall                    y = -0.3855,                    xend = -0.5869,                    yend = 0.2014)) #> Warning in geom_segment(aes(x = 0, y = -0.3855, xend = 0.5869, yend = 0.2014)): All aesthetics have length 1, but the data has 449 rows. #> ℹ Did you mean to use `annotate()`? #> Warning in geom_segment(aes(x = 0, y = -0.3855, xend = -0.5869, yend = 0.2014)): All aesthetics have length 1, but the data has 449 rows. #> ℹ Did you mean to use `annotate()`? flydra_min_dist <-    flydra_treatments %>%    calc_min_dist_box()  ## Display minimum distances to the end walls ## Viewpoint is from above the tunnel flydra_min_dist %>%    ggplot(aes(x = position_length, y = position_width)) +   geom_point(aes(color = min_dist_end), size = 2, shape = 1) +   coord_fixed() +   theme_classic() +   geom_segment(aes(x = -1,         # negative wall                    y = -0.5,                    xend = 1,                    yend = -0.5)) +   geom_segment(aes(x = -1,         # positive wall                    y = 0.5,                    xend = 1,                    yend = 0.5)) #> Warning in geom_segment(aes(x = -1, y = -0.5, xend = 1, yend = -0.5)): All aesthetics have length 1, but the data has 381 rows. #> ℹ Did you mean to use `annotate()`? #> Warning in geom_segment(aes(x = -1, y = 0.5, xend = 1, yend = 0.5)): All aesthetics have length 1, but the data has 381 rows. #> ℹ Did you mean to use `annotate()`?"},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"now-get-visual-angles","dir":"Articles","previous_headings":"Calculating visual angles","what":"Now get visual angles","title":"Estimating visual perceptions from tracking data","text":"Notice larger visual angles subject approaches positive wall.  Notice larger visual angles subject approaches end wall moving towards.","code":"motive_vis_angle <-    motive_min_dist %>%    get_vis_angle()  ## Visualize the angles produced from stimuli on the positive wall ## Viewpoint is from the end of the tunnel motive_vis_angle %>%    ggplot(aes(x = position_width, y = position_height)) +   geom_point(aes(color = vis_angle_pos_deg), size = 2, shape = 1) +   coord_fixed()+   theme_classic() +   geom_segment(aes(x = 0,         # positive wall                    y = -0.3855,                    xend = 0.5869,                    yend = 0.2014)) +   geom_segment(aes(x = 0,         # negative wall                    y = -0.3855,                    xend = -0.5869,                    yend = 0.2014)) #> Warning in geom_segment(aes(x = 0, y = -0.3855, xend = 0.5869, yend = 0.2014)): All aesthetics have length 1, but the data has 449 rows. #> ℹ Did you mean to use `annotate()`? #> Warning in geom_segment(aes(x = 0, y = -0.3855, xend = -0.5869, yend = 0.2014)): All aesthetics have length 1, but the data has 449 rows. #> ℹ Did you mean to use `annotate()`? flydra_vis_angle <-    flydra_min_dist %>%    get_vis_angle()  ## Visualize the angles produced by stimuli on the end walls ## Viewpoint is from above the tunnel flydra_vis_angle %>%    ggplot(aes(x = position_length, y = position_width)) +   geom_point(aes(color = vis_angle_end_deg), size = 2, shape = 1) +   coord_fixed() +   theme_classic() +   geom_segment(aes(x = -1,        # negative wall                    y = -0.5,                    xend = 1,                    yend = -0.5)) +   geom_segment(aes(x = -1,        # positive wall                    y = 0.5,                    xend = 1,                    yend = 0.5)) #> Warning in geom_segment(aes(x = -1, y = -0.5, xend = 1, yend = -0.5)): All aesthetics have length 1, but the data has 381 rows. #> ℹ Did you mean to use `annotate()`? #> Warning in geom_segment(aes(x = -1, y = 0.5, xend = 1, yend = 0.5)): All aesthetics have length 1, but the data has 381 rows. #> ℹ Did you mean to use `annotate()`?"},{"path":"https://docs.ropensci.org/pathviewr/articles/visual-perception-functions.html","id":"calculating-spatial-frequency","dir":"Articles","previous_headings":"","what":"Calculating spatial frequency","title":"Estimating visual perceptions from tracking data","text":"visual angles, can now determine spatial frequency visual pattern perceived subject. Spatial frequency refers size pattern visual space. ’s often reported number cycles visual pattern per 1 degree visual field (cycles/degree). , define cycle length length used stim_param. given distance subject, larger visual pattern produces smaller spatial frequency, whereas smaller visual pattern produces larger spatial frequency. calculate spatial frequency visual stimuli perceived subject distance stimuli, use get_sf().  Notice spatial frequency increases subject recedes positive wall.  Notice spatial frequency decreases subject approaches end wall moving towards.","code":"motive_sf <-    motive_vis_angle %>%   get_sf()  ## Visualize the spatial frequency of the stimulus on the positive wall  ## point is from the end of the tunnel motive_sf %>%    ggplot(aes(x = position_width, y = position_height)) +   geom_point(aes(color = sf_pos), size = 2, shape = 1) +   coord_fixed()+   theme_classic() +   geom_segment(aes(x = 0,         # positive wall                    y = -0.3855,                    xend = 0.5869,                    yend = 0.2014)) +   geom_segment(aes(x = 0,         # negative wall                    y = -0.3855,                    xend = -0.5869,                    yend = 0.2014)) #> Warning in geom_segment(aes(x = 0, y = -0.3855, xend = 0.5869, yend = 0.2014)): All aesthetics have length 1, but the data has 449 rows. #> ℹ Did you mean to use `annotate()`? #> Warning in geom_segment(aes(x = 0, y = -0.3855, xend = -0.5869, yend = 0.2014)): All aesthetics have length 1, but the data has 449 rows. #> ℹ Did you mean to use `annotate()`? flydra_sf <-    flydra_vis_angle %>%    get_sf()  ## Visualize the spatial frequency of the stimulus on the end walls ## Viewpoint is from above the tunnel flydra_sf %>%    ggplot(aes(x = position_length, y = position_width)) +   geom_point(aes(color = sf_end), size = 2, shape = 1) +   coord_fixed() +   theme_classic() +   geom_segment(aes(x = -1,        # negative wall                    y = -0.5,                    xend = 1,                    yend = -0.5)) +   geom_segment(aes(x = -1,        # positive wall                    y = 0.5,                    xend = 1,                    yend = 0.5)) #> Warning in geom_segment(aes(x = -1, y = -0.5, xend = 1, yend = -0.5)): All aesthetics have length 1, but the data has 381 rows. #> ℹ Did you mean to use `annotate()`? #> Warning in geom_segment(aes(x = -1, y = 0.5, xend = 1, yend = 0.5)): All aesthetics have length 1, but the data has 381 rows. #> ℹ Did you mean to use `annotate()`?"},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vikram B. Baliga. Author, maintainer. Melissa S. Armstrong. Author. Eric R. Press. Author. Anne-Sophie Bonnet-Lebrun. Reviewer. Marco Sciaini. Reviewer.","code":""},{"path":"https://docs.ropensci.org/pathviewr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baliga V, Armstrong M, Press E (2021). pathviewR: Tools import, clean, visualize animal movement data R. doi:10.5281/zenodo.4270187, R package version 1.1.7, https://github.com/ropensci/pathviewR.","code":"@Manual{,   title = {pathviewR: Tools to import, clean, and visualize animal movement data in R},   author = {Vikram B. Baliga and Melissa S. Armstrong and Eric R. Press},   year = {2021},   note = {R package version 1.1.7},   publisher = {Github},   journal = {Github repository},   url = {https://github.com/ropensci/pathviewR},   doi = {10.5281/zenodo.4270187}, }"},{"path":"https://docs.ropensci.org/pathviewr/index.html","id":"pathviewr","dir":"","previous_headings":"","what":"Wrangle, Analyze, and Visualize Animal Movement Data","title":"Wrangle, Analyze, and Visualize Animal Movement Data","text":"pathviewr offers tools import, clean, visualize movement data, particularly motion capture systems Optitrack’s Motive, Straw Lab’s Flydra, sources. provide functions remove artifacts, standardize tunnel position tunnel axes, select region interest, isolate specific trajectories, fill gaps trajectory data, calculate 3D per-axis velocity. experiments visual guidance, also provide functions use subject position estimate perception visual stimuli.","code":""},{"path":"https://docs.ropensci.org/pathviewr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Wrangle, Analyze, and Visualize Animal Movement Data","text":"can install pathviewr CRAN via: get latest (developmental) version GitHub, use:","code":"install.packages(\"pathviewr\") devtools::install_github(\"ropensci/pathviewr\")"},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/index.html","id":"data-import-and-cleaning-via-pathviewr","dir":"","previous_headings":"Example","what":"Data import and cleaning via pathviewr","title":"Wrangle, Analyze, and Visualize Animal Movement Data","text":"’ll also load two tidyverse packages wrangling & plotting readme. import clean sample data set .csv files exported Optitrack’s Motive software. examples import clean types data, see Basics data import cleaning vignette. Several functions clean wrangle data available, suggested pipeline steps handled. example, use one two “--one” functions: clean_viewr(). See Basics data import cleaning vignette full pipeline “--one” function.  get sense ’ve done, compare data passed pipeline. important aspect pathviewr defines trajectories managing gaps data. See vignette Managing frame gaps information trajectory definition frame gaps. Now data cleaned, pathviewr includes functions estimate visual perceptions based distance subject/observer visual stimuli walls experimental tunnel. complete description functions, see vignette Estimating visual perceptions tracking data.","code":"library(pathviewr) library(ggplot2) library(magrittr) ## Import the Motive example data included in  ## the package  motive_data <-   read_motive_csv(     system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                 package = 'pathviewr')   ) motive_allinone <-   motive_data %>%   clean_viewr(     relabel_viewr_axes = TRUE,     gather_tunnel_data = TRUE,     trim_tunnel_outliers = TRUE,     standardization_option = \"rotate_tunnel\",     select_x_percent = TRUE,     desired_percent = 50,     rename_viewr_characters = FALSE,     separate_trajectories = TRUE,     max_frame_gap = \"autodetect\",     get_full_trajectories = TRUE,     span = 0.95   ) #> autodetect is an experimental feature -- please report issues.  ## Quick plot ## Colors correspond to unique trajectories (file_sub_traj) motive_allinone %>%   ggplot(aes(x = position_length, y = position_width,               fill = file_sub_traj)) +   geom_point(pch = 21) +   coord_fixed() +   theme_classic() +   theme(     legend.position = \"none\"   ) ## Check out the data's structure before cleaning and wrangling: str(motive_data) #> tibble [934 × 26] (S3: tbl_df/tbl/data.frame) #>  $ frame                     : int [1:934] 72210 72211 72212 72213 72214 72215 72216 72217 72218 72219 ... #>  $ time_sec                  : num [1:934] 722 722 722 722 722 ... #>  $ device02_rotation_x       : num [1:934] 0.1346 0.0819 0.2106 0.1961 0.1305 ... #>  $ device02_rotation_y       : num [1:934] -0.977 -0.978 -0.973 -0.972 -0.975 ... #>  $ device02_rotation_z       : num [1:934] -0.1117 -0.0991 -0.0939 -0.1275 -0.1213 ... #>  $ device02_rotation_w       : num [1:934] 0.1215 0.1654 0.0311 0.0351 0.1315 ... #>  $ device02_position_x       : num [1:934] 0.142 0.137 0.125 0.118 0.113 ... #>  $ device02_position_y       : num [1:934] 0.16 0.164 0.166 0.168 0.173 ... #>  $ device02_position_z       : num [1:934] 2 1.97 1.95 1.92 1.89 ... #>  $ device02_mean_marker_error: num [1:934] 0.000113 0.000105 0.000115 0.000202 0.000106 0.000095 0.000114 0.000117 0.000121 0.000131 ... #>  $ device03_rotation_x       : num [1:934] 0.107 0.111 0.109 0.109 0.108 ... #>  $ device03_rotation_y       : num [1:934] -0.295 -0.295 -0.295 -0.295 -0.295 ... #>  $ device03_rotation_z       : num [1:934] -0.088 -0.0866 -0.0853 -0.0853 -0.0879 ... #>  $ device03_rotation_w       : num [1:934] 0.945 0.945 0.945 0.945 0.945 ... #>  $ device03_position_x       : num [1:934] 0.222 0.222 0.222 0.222 0.222 ... #>  $ device03_position_y       : num [1:934] 0.245 0.245 0.245 0.245 0.245 ... #>  $ device03_position_z       : num [1:934] 0.0597 0.0597 0.0598 0.0598 0.0598 ... #>  $ device03_mean_marker_error: num [1:934] 0.000166 0.000172 0.000164 0.000163 0.000162 0.000162 0.000169 0.00017 0.00017 0.000213 ... #>  $ device05_rotation_x       : num [1:934] 0.00672 0.00714 0.00709 0.00742 0.00826 ... #>  $ device05_rotation_y       : num [1:934] 0.944 0.944 0.944 0.944 0.944 ... #>  $ device05_rotation_z       : num [1:934] -0.117 -0.116 -0.118 -0.118 -0.117 ... #>  $ device05_rotation_w       : num [1:934] 0.308 0.308 0.309 0.31 0.308 ... #>  $ device05_position_x       : num [1:934] 0.173 0.173 0.173 0.173 0.173 ... #>  $ device05_position_y       : num [1:934] 0.243 0.243 0.243 0.243 0.243 ... #>  $ device05_position_z       : num [1:934] 2.66 2.66 2.66 2.66 2.66 ... #>  $ device05_mean_marker_error: num [1:934] 0.000241 0.000247 0.000255 0.000244 0.00023 0.000226 0.000231 0.000236 0.000242 0.000263 ... #>  - attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"pathviewr_steps\")= chr \"viewr\" #>  - attr(*, \"file_id\")= chr \"pathviewr_motive_example_data.csv\" #>  - attr(*, \"file_mtime\")= POSIXct[1:1], format: \"2023-03-07 11:12:49\" #>  - attr(*, \"frame_rate\")= num 100 #>  - attr(*, \"header\")='data.frame':   11 obs. of  2 variables: #>   ..$ metadata: chr [1:11] \"Format Version\" \"Take Name\" \"Take Notes\" \"Capture Frame Rate\" ... #>   ..$ value   : chr [1:11] \"1.23\" \"sept-18_mixed-group_16-30\" \"\" \"100.000000\" ... #>  - attr(*, \"Motive_IDs\")= chr [1:24] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" ... #>  - attr(*, \"subject_names_full\")= chr [1:24] \"device02\" \"device02\" \"device02\" \"device02\" ... #>  - attr(*, \"subject_names_simple\")= chr [1:3] \"device02\" \"device03\" \"device05\" #>  - attr(*, \"data_names\")= chr [1:26] \"frame\" \"time_sec\" \"device02_rotation_x\" \"device02_rotation_y\" ... #>  - attr(*, \"data_types_full\")= chr [1:24] \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" ... #>  - attr(*, \"data_types_simple\")= chr \"Rigid Body\" #>  - attr(*, \"d1\")= chr [1:26] \"\" \"\" \"Rotation\" \"Rotation\" ... #>  - attr(*, \"d2\")= chr [1:26] \"Frame\" \"Time (Seconds)\" \"X\" \"Y\" ... #>  - attr(*, \"import_method\")= chr \"motive\"  ## Check out the data's structure after cleaning and wrangling: str(motive_allinone) #> tibble [449 × 24] (S3: tbl_df/tbl/data.frame) #>  $ frame            : int [1:449] 72213 72214 72215 72216 72217 72218 72219 72220 72221 72222 ... #>  $ time_sec         : num [1:449] 722 722 722 722 722 ... #>  $ subject          : chr [1:449] \"device02\" \"device02\" \"device02\" \"device02\" ... #>  $ position_length  : num [1:449] 0.647 0.62 0.593 0.567 0.541 ... #>  $ position_width   : num [1:449] -0.112 -0.116 -0.122 -0.134 -0.141 ... #>  $ position_height  : num [1:449] -0.0371 -0.0324 -0.0273 -0.0235 -0.0209 ... #>  $ rotation_length  : num [1:449] -0.128 -0.121 -0.105 -0.106 -0.149 ... #>  $ rotation_width   : num [1:449] 0.1961 0.1305 0.0935 0.1798 0.164 ... #>  $ rotation_height  : num [1:449] -0.972 -0.975 -0.975 -0.975 -0.972 ... #>  $ rotation_real    : num [1:449] 0.0351 0.1315 0.1734 0.0807 0.0824 ... #>  $ mean_marker_error: num [1:449] 0.000202 0.000106 0.000095 0.000114 0.000117 0.000121 0.000131 0.00014 0.000113 0.000114 ... #>  $ velocity         : num [1:449] 2.73 2.78 2.84 2.85 2.68 ... #>  $ length_inst_vel  : num [1:449] -2.65 -2.72 -2.74 -2.58 -2.56 ... #>  $ width_inst_vel   : num [1:449] -0.642 -0.387 -0.58 -1.139 -0.75 ... #>  $ height_inst_vel  : num [1:449] 0.184 0.475 0.508 0.379 0.258 ... #>  $ traj_id          : int [1:449] 0 0 0 0 0 0 0 0 0 0 ... #>  $ file_sub_traj    : chr [1:449] \"pathviewr_motive_example_data.csv_device02_0\" \"pathviewr_motive_example_data.csv_device02_0\" \"pathviewr_motive_example_data.csv_device02_0\" \"pathviewr_motive_example_data.csv_device02_0\" ... #>  $ traj_length      : int [1:449] 63 63 63 63 63 63 63 63 63 63 ... #>  $ start_length     : num [1:449] 0.647 0.647 0.647 0.647 0.647 ... #>  $ end_length       : num [1:449] -0.656 -0.656 -0.656 -0.656 -0.656 ... #>  $ length_diff      : num [1:449] 1.3 1.3 1.3 1.3 1.3 ... #>  $ start_length_sign: num [1:449] 1 1 1 1 1 1 1 1 1 1 ... #>  $ end_length_sign  : num [1:449] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ... #>  $ direction        : chr [1:449] \"leftwards\" \"leftwards\" \"leftwards\" \"leftwards\" ... #>  - attr(*, \"file_id\")= chr \"pathviewr_motive_example_data.csv\" #>  - attr(*, \"file_mtime\")= POSIXct[1:1], format: \"2023-03-07 11:12:49\" #>  - attr(*, \"frame_rate\")= num 100 #>  - attr(*, \"header\")='data.frame':   11 obs. of  2 variables: #>   ..$ metadata: chr [1:11] \"Format Version\" \"Take Name\" \"Take Notes\" \"Capture Frame Rate\" ... #>   ..$ value   : chr [1:11] \"1.23\" \"sept-18_mixed-group_16-30\" \"\" \"100.000000\" ... #>  - attr(*, \"Motive_IDs\")= chr [1:24] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" ... #>  - attr(*, \"subject_names_full\")= chr [1:24] \"device02\" \"device02\" \"device02\" \"device02\" ... #>  - attr(*, \"subject_names_simple\")= chr [1:3] \"device02\" \"device03\" \"device05\" #>  - attr(*, \"data_names\")= chr [1:26] \"frame\" \"time_sec\" \"device02_rotation_x\" \"device02_rotation_y\" ... #>  - attr(*, \"data_types_full\")= chr [1:24] \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" ... #>  - attr(*, \"data_types_simple\")= chr \"Rigid Body\" #>  - attr(*, \"d1\")= chr [1:26] \"\" \"\" \"Rotation\" \"Rotation\" ... #>  - attr(*, \"d2\")= chr [1:26] \"Frame\" \"Time (Seconds)\" \"X\" \"Y\" ... #>  - attr(*, \"import_method\")= chr \"motive\" #>  - attr(*, \"pathviewr_steps\")= chr [1:10] \"viewr\" \"renamed_tunnel\" \"gathered_tunnel\" \"artifacts_removed\" ... #>  - attr(*, \"perch1_midpoint_original\")= num [1:3] 0 0.2 0.205 #>  - attr(*, \"perch2_midpoint_original\")= num [1:3] 2.54 0.24 0.205 #>  - attr(*, \"tunnel_centerpoint_original\")= num [1:3] 1.27 0.22 0.205 #>  - attr(*, \"rotation_degrees\")= num 0.902 #>  - attr(*, \"rotation_radians\")= num 0.0157 #>  - attr(*, \"perch1_midpoint_current\")= num [1:3] -1.27 4.65e-15 2.05e-01 #>  - attr(*, \"perch2_midpoint_current\")= num [1:3] 1.27 -4.65e-15 2.05e-01 #>  - attr(*, \"percent_selected\")= num 50 #>  - attr(*, \"full_tunnel_length\")= num 2.64 #>  - attr(*, \"selected_tunnel_length\")= num 1.32 #>  - attr(*, \"max_frame_gap\")= int [1:3] 1 1 2 #>  - attr(*, \"span\")= num 0.95 #>  - attr(*, \"trajectories_removed\")= int 5"},{"path":"https://docs.ropensci.org/pathviewr/index.html","id":"add-more-info-about-experiments","dir":"","previous_headings":"Example","what":"Add more info about experiments","title":"Wrangle, Analyze, and Visualize Animal Movement Data","text":"Now objects cleaned, use insert_treatments() add information experiments necessary calculating visual perceptions. data example recorded V-shaped tunnel. Accordingly, vertex angle vertex height tunnel, along information visual stimuli used experiment, added data inform calculations visual perception (next section).","code":"motive_V <-    motive_allinone %>%   insert_treatments(     tunnel_config = \"v\",     perch_2_vertex = 0.4,     vertex_angle = 90,     tunnel_length = 2,     stim_param_lat_pos = 0.1,     stim_param_lat_neg = 0.1,     stim_param_end_pos = 0.3,     stim_param_end_neg = 0.3,     treatment = \"lat10_end_30\"   )"},{"path":"https://docs.ropensci.org/pathviewr/index.html","id":"estimate-perception-of-visual-stimuli","dir":"","previous_headings":"Example","what":"Estimate perception of visual stimuli","title":"Wrangle, Analyze, and Visualize Animal Movement Data","text":"calculate spatial frequency visual stimuli perceived subject distance stimuli, use get_sf(). require two intermediate steps: 1) calculating minimum distance subject wall (via calc_min_dist_v()) 2) estimating visual angles subject’s perspective (get_vis_angle()). Visualizing calculations provides intuitive understanding visual perceptions change subject moves throughout tunnel. Please see vignette Estimating visual perceptions tracking data examples visualizing calculations.","code":"motive_V_sf <-    motive_V %>%   calc_min_dist_v(simplify_output = TRUE) %>%   get_vis_angle() %>%   get_sf() ggplot(motive_V_sf, aes(x = position_width, y = position_height)) +   geom_point(aes(color = sf_pos), shape=1, size=3) +   geom_segment(aes(x = 0,         # dimensions of the positive wall                   y = -0.3855,                   xend = 0.5869,                   yend = 0.2014)) +   geom_segment(aes(x = 0,         # dimensions of the negative wall                    y = -0.3855,                    xend = -0.5869,                    yend = 0.2014)) +   coord_fixed() +   theme_classic() +   theme(     legend.position = \"none\"   )"},{"path":"https://docs.ropensci.org/pathviewr/index.html","id":"contributing-andor-raising-issues","dir":"","previous_headings":"","what":"Contributing and/or raising Issues","title":"Wrangle, Analyze, and Visualize Animal Movement Data","text":"welcome feedback bugs, improvements, /feature requests. Please see Issues templates GitHub make bug fix request feature request. contribute code via pull request, please consult Contributing Guide first.","code":""},{"path":"https://docs.ropensci.org/pathviewr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Wrangle, Analyze, and Visualize Animal Movement Data","text":"preferred way cite pathviewr (subject change) : Baliga VB, Armstrong MS, Press ER (2021). pathviewr: Tools import, clean, visualize animal movement data R. R package version 1.1.7, https://github.com/ropensci/pathviewr. doi: 10.5281/zenodo.4270187","code":""},{"path":"https://docs.ropensci.org/pathviewr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Wrangle, Analyze, and Visualize Animal Movement Data","text":"GPL (>= 3) + file LICENSE 🐢","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/as_viewr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data from another format into a viewr object — as_viewr","title":"Convert data from another format into a viewr object — as_viewr","text":"data non-Motive, non-Flydra source, function can used ensure data put right format work pathviewr functions.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/as_viewr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data from another format into a viewr object — as_viewr","text":"","code":"as_viewr(   obj_name,   frame_rate = 100,   frame_col,   time_col,   subject_col,   position_length_col,   position_width_col,   position_height_col,   include_rotation = FALSE,   rotation_real_col,   rotation_length_col,   rotation_width_col,   rotation_height_col )"},{"path":"https://docs.ropensci.org/pathviewr/reference/as_viewr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data from another format into a viewr object — as_viewr","text":"obj_name tibble data frame containing movement trajectories frame_rate Must single numeric value indicating capture frame rate frames per second. frame_col Column number obj_name contains frame numbers time_col Column number obj_name contains time (must seconds) subject_col Column number obj_name contains subject name(s) position_length_col Column number obj_name contains length-axis position values position_width_col Column number obj_name contains width-axis position values position_height_col Column number obj_name contains height-axis position values include_rotation rotation data included? Defaults FALSE rotation_real_col Column number obj_name contains \"real\" axis quaternion rotation data rotation_length_col Column number obj_name contains length axis quaternion rotation data rotation_width_col Column number obj_name contains width axis quaternion rotation data rotation_height_col Column number obj_name contains height axis quaternion rotation data","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/as_viewr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data from another format into a viewr object — as_viewr","text":"tibble organized compliant pathviewr functions contains attributes pathviewr_steps entries set c(\"viewr\",   \"renamed_tunnel\", \"gathered_tunnel\")","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/as_viewr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert data from another format into a viewr object — as_viewr","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/as_viewr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data from another format into a viewr object — as_viewr","text":"","code":"## Create a dummy data frame with simulated (nonsense) data df <- data.frame(frame = seq(1, 100, by = 1),                  time_sec = seq(0, by = 0.01, length.out = 100),                  subject = \"birdie_sanders\",                  z = rnorm(100),                  x = rnorm(100),                  y = rnorm(100))  ## Use as_viewr() to convert it into a viewr object test <-   as_viewr(     df,     frame_rate = 100,     frame_col = 1,     time_col = 2,     subject_col = 3,     position_length_col = 5,     position_width_col = 6,     position_height_col = 4   )"},{"path":"https://docs.ropensci.org/pathviewr/reference/bind_viewr_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind viewr objects — bind_viewr_objects","title":"Bind viewr objects — bind_viewr_objects","text":"Combine list multiple viewr objects single viewr object","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/bind_viewr_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind viewr objects — bind_viewr_objects","text":"","code":"bind_viewr_objects(obj_list)"},{"path":"https://docs.ropensci.org/pathviewr/reference/bind_viewr_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind viewr objects — bind_viewr_objects","text":"obj_list list viewr objects","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/bind_viewr_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind viewr objects — bind_viewr_objects","text":"single viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") combines rows source viewr objects obj_list. Metadata may necessarily retained therefore attributes used caution.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/bind_viewr_objects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bind viewr objects — bind_viewr_objects","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/bind_viewr_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind viewr objects — bind_viewr_objects","text":"","code":"## Since we only have one example file of each type provided ## in pathviewr, we will simply import the same example multiple ## times to simulate batch importing. Replace the contents of ## the following list with your own list of files to be imported.  ## Make a list of the same example file 3x import_list <-   c(rep(     system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                 package = 'pathviewr'),     3   ))  ## Batch import motive_batch_imports <-   import_batch(import_list,                import_method = \"motive\",                import_messaging = TRUE) #> File 1 imported. #> File 2 imported. #> File 3 imported.  ## Batch cleaning of these imported files ## via clean_viewr_batch() motive_batch_cleaned <-   clean_viewr_batch(     file_announce = TRUE,     motive_batch_imports,     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> autodetect is an experimental feature -- please report issues. #> File 1 has been cleaned successfully. #> autodetect is an experimental feature -- please report issues. #> File 2 has been cleaned successfully. #> autodetect is an experimental feature -- please report issues. #> File 3 has been cleaned successfully.  ## Alternatively, use import_and_clean_batch() to ## combine import with cleaning on a batch of files motive_batch_import_and_clean <-   import_and_clean_batch(     import_list,     import_method = \"motive\",     import_messaging = TRUE,     motive_batch_imports,     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> File 1 imported. #> File 2 imported. #> File 3 imported. #> autodetect is an experimental feature -- please report issues. #> autodetect is an experimental feature -- please report issues. #> autodetect is an experimental feature -- please report issues.  ## Each of these lists of objects can be bound into ## one viewr object (i.e. one tibble) via ## bind_viewr_objects() motive_bound_one <-   bind_viewr_objects(motive_batch_cleaned)  motive_bound_two <-   bind_viewr_objects(motive_batch_import_and_clean)  ## Either route results in the same object ultimately: identical(motive_bound_one, motive_bound_two) #> [1] TRUE"},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate minimum distance to lateral and end walls in a box-shaped\nexperimental tunnel — calc_min_dist_box","title":"Calculate minimum distance to lateral and end walls in a box-shaped\nexperimental tunnel — calc_min_dist_box","text":"Calculate minimum distance lateral end walls box-shaped experimental tunnel","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate minimum distance to lateral and end walls in a box-shaped\nexperimental tunnel — calc_min_dist_box","text":"","code":"calc_min_dist_box(obj_name)"},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate minimum distance to lateral and end walls in a box-shaped\nexperimental tunnel — calc_min_dist_box","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps include \"viewr\" treatments_added.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate minimum distance to lateral and end walls in a box-shaped\nexperimental tunnel — calc_min_dist_box","text":"tibble data.frame added variables min_dist_pos, min_dist_neg, min_dist_end,.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_box.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate minimum distance to lateral and end walls in a box-shaped\nexperimental tunnel — calc_min_dist_box","text":"calc_min_dist_box() assumes subject locomotes facing forward, therefore min_dist_end represents minimum distance subject end wall moving towards. outputs meters.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_box.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate minimum distance to lateral and end walls in a box-shaped\nexperimental tunnel — calc_min_dist_box","text":"Eric R. Press","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate minimum distance to lateral and end walls in a box-shaped\nexperimental tunnel — calc_min_dist_box","text":"","code":"## Import sample data from package  flydra_data <-  read_flydra_mat(system.file(\"extdata\", \"pathviewr_flydra_example_data.mat\",                                package = 'pathviewr'),                                subject_name = \"birdie_sanders\")     ## Process data up to and including insert_treatments()   flydra_data_full <-    flydra_data %>%    redefine_tunnel_center(length_method = \"middle\",                          height_method = \"user-defined\",                          height_zero = 1.44) %>%    select_x_percent(desired_percent = 50) %>%    separate_trajectories(max_frame_gap = \"autodetect\") %>%    get_full_trajectories(span = 0.95) %>%    insert_treatments(tunnel_config = \"box\",                     tunnel_length = 3,                     tunnel_width = 1,                     stim_param_lat_pos = 0.1,                     stim_param_lat_neg = 0.1,                     stim_param_end_pos = 0.3,                     stim_param_end_neg = 0.3,                     treatment = \"lat10_end_30\") %>%     ## Now calculate the minimum distances to each wall    calc_min_dist_box() #> autodetect is an experimental feature -- please report issues.     ## See 3 new variables for calculations to lateral and end walls    names(flydra_data_full) #>  [1] \"tunnel_config\"      \"tunnel_width\"       \"tunnel_length\"      #>  [4] \"stim_param_lat_pos\" \"stim_param_lat_neg\" \"stim_param_end_pos\" #>  [7] \"stim_param_end_neg\" \"treatment\"          \"frame\"              #> [10] \"time_sec\"           \"subject\"            \"position_length\"    #> [13] \"position_width\"     \"position_height\"    \"velocity\"           #> [16] \"length_inst_vel\"    \"width_inst_vel\"     \"height_inst_vel\"    #> [19] \"traj_id\"            \"file_sub_traj\"      \"traj_length\"        #> [22] \"start_length\"       \"end_length\"         \"length_diff\"        #> [25] \"start_length_sign\"  \"end_length_sign\"    \"direction\"          #> [28] \"min_dist_pos\"       \"min_dist_neg\"       \"min_dist_end\""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_v.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate minimum distance to lateral and end walls in a V-shaped\nexperimental tunnel — calc_min_dist_v","title":"Calculate minimum distance to lateral and end walls in a V-shaped\nexperimental tunnel — calc_min_dist_v","text":"Calculate minimum distance lateral end walls V-shaped experimental tunnel","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_v.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate minimum distance to lateral and end walls in a V-shaped\nexperimental tunnel — calc_min_dist_v","text":"","code":"calc_min_dist_v(obj_name, simplify_output = TRUE)"},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_v.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate minimum distance to lateral and end walls in a V-shaped\nexperimental tunnel — calc_min_dist_v","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" treatments_added. simplify_output TRUE, returned object includes minimum distance subject lateral/end walls. FALSE, returned object includes variables internal calculation.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_v.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate minimum distance to lateral and end walls in a V-shaped\nexperimental tunnel — calc_min_dist_v","text":"tibble data.frame added variables height_2_vertex, height_2_screen, width_2_screen_pos, width_2_screen_neg, min_dist_pos, min_dist_neg, min_dist_end, bound_pos, bound_neg.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_v.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate minimum distance to lateral and end walls in a V-shaped\nexperimental tunnel — calc_min_dist_v","text":"tunnels vertex_angle >90 degree, bound_pos bound_neg represent planes orthogonal lateral walls used modify min_dist_pos min_dist_neg calculations prevent erroneous outputs. calc_min_dist_v() assumes subject locomotes facing forward, therefore min_dist_end represents minimum distance subject end wall moving towards outputs meters.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_v.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate minimum distance to lateral and end walls in a V-shaped\nexperimental tunnel — calc_min_dist_v","text":"Eric R. Press","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/calc_min_dist_v.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate minimum distance to lateral and end walls in a V-shaped\nexperimental tunnel — calc_min_dist_v","text":"","code":"## Import sample data from package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr'))   ## Process data up to and including insert_treatments() motive_data_full <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data() %>%   trim_tunnel_outliers() %>%   rotate_tunnel() %>%   select_x_percent(desired_percent = 50) %>%   separate_trajectories(max_frame_gap = \"autodetect\") %>%   get_full_trajectories(span = 0.95) %>%   insert_treatments(tunnel_config = \"v\",                    perch_2_vertex = 0.4,                    vertex_angle = 90,                    tunnel_length = 2,                    stim_param_lat_pos = 0.1,                    stim_param_lat_neg = 0.1,                    stim_param_end_pos = 0.3,                    stim_param_end_neg = 0.3,                    treatment = \"lat10_end_30\") %>%   ## Now calculate the minimum distances to each wall   calc_min_dist_v(simplify_output = TRUE) #> autodetect is an experimental feature -- please report issues.    ## See 3 new variables for calculations to lateral and end walls   names(motive_data_full) #>  [1] \"tunnel_config\"      \"perch_2_vertex\"     \"vertex_angle\"       #>  [4] \"tunnel_length\"      \"stim_param_lat_pos\" \"stim_param_lat_neg\" #>  [7] \"stim_param_end_pos\" \"stim_param_end_neg\" \"treatment\"          #> [10] \"frame\"              \"time_sec\"           \"subject\"            #> [13] \"position_length\"    \"position_width\"     \"position_height\"    #> [16] \"rotation_length\"    \"rotation_width\"     \"rotation_height\"    #> [19] \"rotation_real\"      \"mean_marker_error\"  \"traj_id\"            #> [22] \"file_sub_traj\"      \"traj_length\"        \"start_length\"       #> [25] \"end_length\"         \"length_diff\"        \"start_length_sign\"  #> [28] \"end_length_sign\"    \"direction\"          \"min_dist_pos\"       #> [31] \"min_dist_neg\"       \"min_dist_end\""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_by_span.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove file_sub_traj entries that do not span the full region of interest — clean_by_span","title":"Remove file_sub_traj entries that do not span the full region of interest — clean_by_span","text":"Remove file_sub_traj entries span full region interest","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_by_span.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove file_sub_traj entries that do not span the full region of interest — clean_by_span","text":"","code":"clean_by_span(   obj_name,   axis = \"position_length\",   min_value = NULL,   max_value = NULL,   tolerance = 0.1 )"},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_by_span.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove file_sub_traj entries that do not span the full region of interest — clean_by_span","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" axis Along axis restrictions enforced? min_value Minimum coordinate value; setting NULL auto-compute best value max_value Maximum coordinate; setting NULL auto-compute best value tolerance proporiton axis value","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_by_span.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove file_sub_traj entries that do not span the full region of interest — clean_by_span","text":"viewr object (tibble data.frame attribute pathviewr_steps. Trajectories span full region interest removed; trajectory identities (file_sub_traj) changed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_by_span.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove file_sub_traj entries that do not span the full region of interest — clean_by_span","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr.html","id":null,"dir":"Reference","previous_headings":"","what":"All-in-one function to clean imported objects — clean_viewr","title":"All-in-one function to clean imported objects — clean_viewr","text":"imported viewr object, run cleaning pipeline desired","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All-in-one function to clean imported objects — clean_viewr","text":"","code":"clean_viewr(   obj_name,   relabel_viewr_axes = TRUE,   gather_tunnel_data = TRUE,   trim_tunnel_outliers = TRUE,   standardization_option = \"rotate_tunnel\",   get_velocity = TRUE,   select_x_percent = TRUE,   rename_viewr_characters = FALSE,   separate_trajectories = TRUE,   get_full_trajectories = TRUE,   fill_traj_gaps = FALSE,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All-in-one function to clean imported objects — clean_viewr","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" relabel_viewr_axes default TRUE, axes relabeled? gather_tunnel_data default TRUE, tunnel data gathered? trim_tunnel_outliers default TRUE, outliers trimmed? standardization_option default \"rotate_tunnel\"; standardization option used? See Details . get_velocity default TRUE, velocity computed? select_x_percent default TRUE, region interest selected? rename_viewr_characters default FALSE, subjects renamed? separate_trajectories default TRUE, trajectories defined? get_full_trajectories default TRUE, full trajectories retained? fill_traj_gaps default FALSE, gaps trajectories filled? ... Additional arguments passed corresponding functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All-in-one function to clean imported objects — clean_viewr","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") passed several pathviewr functions desired user, resulting data cleaned ready analyses.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"All-in-one function to clean imported objects — clean_viewr","text":"argument corresponds standalone function pathviewr. E.g. parameter relabel_viewr_axes allows user choose whether pathviewr::relabel_viewr_axes() run internally. user desire use non-default parameter values functions included , supplied function additional arguments formatted exactly appear corresponding function(s). E.g. \"autodetect\" feature pathviewr::separate_trajectories() desired, add argument max_frame_gap = \"autodetect\" arguments supplied function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"All-in-one function to clean imported objects — clean_viewr","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All-in-one function to clean imported objects — clean_viewr","text":"","code":"library(pathviewr)  ## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  motive_full <-   motive_data %>%   clean_viewr(desired_percent = 50,               max_frame_gap = \"autodetect\",               span = 0.95) #> autodetect is an experimental feature -- please report issues.  ## Alternatively, used the import_and_clean_viewr() ## function to combine these steps motive_import_and_clean <-   import_and_clean_viewr(     file_name = system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                             package = 'pathviewr'),     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> autodetect is an experimental feature -- please report issues."},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch clean viewr files — clean_viewr_batch","title":"Batch clean viewr files — clean_viewr_batch","text":"list viewr objects, run pipeline (relabel axes get full trajectories, desired) via clean_viewr()","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch clean viewr files — clean_viewr_batch","text":"","code":"clean_viewr_batch(obj_list, file_announce = FALSE, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch clean viewr files — clean_viewr_batch","text":"obj_list list viewr objects (.e. list tibbles attribute pathviewr_steps includes \"viewr\") file_announce function report time file processed? Default FALSE; TRUE, message appear console time file cleaned successfully. ... Arguments passed specify function clean files.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch clean viewr files — clean_viewr_batch","text":"list viewr objects (tibble data.frame attribute pathviewr_steps includes \"viewr\") passed corresponding cleaning functions.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr_batch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batch clean viewr files — clean_viewr_batch","text":"viewr objects list, e.g. object generated import_batch(). See clean_viewr() details cleaning steps handled /refer corresponding cleaning functions .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr_batch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Batch clean viewr files — clean_viewr_batch","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/clean_viewr_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch clean viewr files — clean_viewr_batch","text":"","code":"## Since we only have one example file of each type provided ## in pathviewr, we will simply import the same example multiple ## times to simulate batch importing. Replace the contents of ## the following list with your own list of files to be imported.  ## Make a list of the same example file 3x import_list <-   c(rep(     system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                 package = 'pathviewr'),     3   ))  ## Batch import motive_batch_imports <-   import_batch(import_list,                import_method = \"motive\",                import_messaging = TRUE) #> File 1 imported. #> File 2 imported. #> File 3 imported.  ## Batch cleaning of these imported files ## via clean_viewr_batch() motive_batch_cleaned <-   clean_viewr_batch(     file_announce = TRUE,     motive_batch_imports,     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> autodetect is an experimental feature -- please report issues. #> File 1 has been cleaned successfully. #> autodetect is an experimental feature -- please report issues. #> File 2 has been cleaned successfully. #> autodetect is an experimental feature -- please report issues. #> File 3 has been cleaned successfully.  ## Alternatively, use import_and_clean_batch() to ## combine import with cleaning on a batch of files motive_batch_import_and_clean <-   import_and_clean_batch(     import_list,     import_method = \"motive\",     import_messaging = TRUE,     motive_batch_imports,     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> File 1 imported. #> File 2 imported. #> File 3 imported. #> autodetect is an experimental feature -- please report issues. #> autodetect is an experimental feature -- please report issues. #> autodetect is an experimental feature -- please report issues.  ## Each of these lists of objects can be bound into ## one viewr object (i.e. one tibble) via ## bind_viewr_objects() motive_bound_one <-   bind_viewr_objects(motive_batch_cleaned)  motive_bound_two <-   bind_viewr_objects(motive_batch_import_and_clean)  ## Either route results in the same object ultimately: identical(motive_bound_one, motive_bound_two) #> [1] TRUE"},{"path":"https://docs.ropensci.org/pathviewr/reference/deg_2_rad.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert degrees to radians — deg_2_rad","title":"Convert degrees to radians — deg_2_rad","text":"Convert degrees radians","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/deg_2_rad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert degrees to radians — deg_2_rad","text":"","code":"deg_2_rad(deg)"},{"path":"https://docs.ropensci.org/pathviewr/reference/deg_2_rad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert degrees to radians — deg_2_rad","text":"deg Degrees (numeric length >= 1)","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/deg_2_rad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert degrees to radians — deg_2_rad","text":"angle(s) radians (numeric vector length)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/deg_2_rad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert degrees to radians — deg_2_rad","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/deg_2_rad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert degrees to radians — deg_2_rad","text":"","code":"## One input deg_2_rad(90) #> [1] 1.570796  ## Multiple inputs deg_2_rad(c(5, 10, 15, 20)) #> [1] 0.08726646 0.17453293 0.26179939 0.34906585"},{"path":"https://docs.ropensci.org/pathviewr/reference/exclude_by_velocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove trajectories entirely, based on velocity thresholds — exclude_by_velocity","title":"Remove trajectories entirely, based on velocity thresholds — exclude_by_velocity","text":"Remove trajectories viewr object contain instances velocity known spurious.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/exclude_by_velocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove trajectories entirely, based on velocity thresholds — exclude_by_velocity","text":"","code":"exclude_by_velocity(obj_name, vel_min = NULL, vel_max = NULL)"},{"path":"https://docs.ropensci.org/pathviewr/reference/exclude_by_velocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove trajectories entirely, based on velocity thresholds — exclude_by_velocity","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" vel_min Default NULL. numeric entered, trajectories least one observation velocity less vel_min removed. vel_max Default NULL. numeric entered, trajectories least one observation velocity greater vel_max removed.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/exclude_by_velocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove trajectories entirely, based on velocity thresholds — exclude_by_velocity","text":"new viewr object identical input object now excludes trajectories contain observations velocity less vel_min (specified) /velocity greater vel_max (specified)","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/exclude_by_velocity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove trajectories entirely, based on velocity thresholds — exclude_by_velocity","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/exclude_by_velocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove trajectories entirely, based on velocity thresholds — exclude_by_velocity","text":"","code":"## Import and clean the example Motive data motive_import_and_clean <-   import_and_clean_viewr(     file_name = system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                             package = 'pathviewr'),     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> autodetect is an experimental feature -- please report issues.  ## See the distribution of velocities hist(motive_import_and_clean$velocity)   ## Let's remove any trajectories that contain ## velocity < 2 motive_vel_filtered <-   motive_import_and_clean %>%   exclude_by_velocity(vel_min = 2)  ## See how the distribution of velocities has changed hist(motive_vel_filtered$velocity)"},{"path":"https://docs.ropensci.org/pathviewr/reference/fill_traj_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate gaps within trajectories — fill_traj_gaps","title":"Interpolate gaps within trajectories — fill_traj_gaps","text":"Use LOESS smoothing fill gaps missing data within trajectories viewr object","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/fill_traj_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate gaps within trajectories — fill_traj_gaps","text":"","code":"fill_traj_gaps(   obj_name,   loess_degree = 1,   loess_criterion = c(\"aicc\", \"gcv\"),   loess_family = c(\"gaussian\", \"symmetric\"),   loess_user_span = NULL )"},{"path":"https://docs.ropensci.org/pathviewr/reference/fill_traj_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate gaps within trajectories — fill_traj_gaps","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\". Trajectories must predefined (.e. via separate_trajectories()). loess_degree See \"degree\" argument fANCOVA::loess.() loess_criterion See \"criterion\" argument fANCOVA::loess.() loess_family See \"family\" argument fANCOVA::loess.() loess_user_span See \"user.span\" argument fANCOVA::loess.()","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/fill_traj_gaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate gaps within trajectories — fill_traj_gaps","text":"viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" now includes new observations (rows) result interpolation fill missing data. new column gaps_filled added data indicate original data (\"\") vs data inserted fill gaps (\"Yes\").","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/fill_traj_gaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpolate gaps within trajectories — fill_traj_gaps","text":"strongly recommended input viewr object \"cleaned\" via select_x_percent() -> separate_trajectories() -> get_full_trajectories() prior using function. ensure trajectories minor gaps used analyses. function enable interpolate missing data minor gaps. Interpolation handled first fitting series LOESS regressions (via fANCOVA::loess.()). regression, position axis (e.g. position_length) regressed frame (frame x-axis). relationship, values missing position data determined inserted original data set. See loess.details parameters.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/fill_traj_gaps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interpolate gaps within trajectories — fill_traj_gaps","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/fill_traj_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate gaps within trajectories — fill_traj_gaps","text":"","code":"library(pathviewr)  ## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  ## Clean, isolate, and label trajectories motive_full <-   motive_data %>%   clean_viewr(desired_percent = 50,               max_frame_gap = \"autodetect\",               span = 0.95) #> autodetect is an experimental feature -- please report issues.  ## Interpolate missing data via this function motive_filling <-  motive_full %>%  fill_traj_gaps()  ## plot all trajectories (before) plot_viewr_trajectories(motive_full, multi_plot = TRUE)  ## plot all trajectories(after) plot_viewr_trajectories(motive_filling, multi_plot = TRUE)"},{"path":"https://docs.ropensci.org/pathviewr/reference/find_curve_elbow.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the ","title":"Find the ","text":"bivariate data show monotonic decreases (e.g. plots trajectory count vs. frame gap allowed, scree plots PCAs), function find \"elbow\" point. done drawing (imaginary) line first observation final observation. , distance line observation calculated. \"elbow\" curve observation maximizes distance.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/find_curve_elbow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the ","text":"","code":"find_curve_elbow(data_frame, export_type = \"row_num\", plot_curve = FALSE)"},{"path":"https://docs.ropensci.org/pathviewr/reference/find_curve_elbow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the ","text":"data_frame two-column data frame (numeric entries ), ordered x-axis first, y-axis second. export_type \"row_num\" (default), row number elbow point returned. anything else, entire row original data frame returned. plot_curve Default FALSE; curve plotted?","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/find_curve_elbow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the ","text":"export_type row_num row number elbow point returned. anything else used argument, entire row original data frame \"elbow\" located returned. plot_curve TRUE, curve plotted along vertical line drawn computed elbow point.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/find_curve_elbow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find the ","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/find_curve_elbow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the ","text":"","code":"df <- data.frame(x = seq(1:10),                  y = 1/seq(1:10)) plot(df)  find_curve_elbow(df, plot_curve = TRUE)  #> [1] 3"},{"path":"https://docs.ropensci.org/pathviewr/reference/gather_tunnel_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather data columns into key-value pairs — gather_tunnel_data","title":"Gather data columns into key-value pairs — gather_tunnel_data","text":"Reformat viewr data \"tidy\" format every row corresponds position (potentially rotation) single subject observed frame time.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/gather_tunnel_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather data columns into key-value pairs — gather_tunnel_data","text":"","code":"gather_tunnel_data(obj_name, NA_drop = TRUE, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/gather_tunnel_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather data columns into key-value pairs — gather_tunnel_data","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" NA_drop rows NAs dropped? Defaults TRUE ... Additional arguments can passed pathviewr functions relabel_viewr_axes() read_motive_csv()","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/gather_tunnel_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather data columns into key-value pairs — gather_tunnel_data","text":"tibble \"tidy\" format formatted every row correspond position (potentially rotation) single subject observed frame time. Subjects' names automatically parsed original variable names (e.g. subject1_rotation_width extracts \"subject1\" subject name) stored Subjects column returned tibble.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/gather_tunnel_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gather data columns into key-value pairs — gather_tunnel_data","text":"tibble data.frame fed must variables subject names axis names separated underscores. Axis names must one following: position_length, position_width, position_height. three dimensions must present data. Collectively, means names like bird01_position_length larry_position_height acceptable, bird01_x bird01_length .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/gather_tunnel_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gather data columns into key-value pairs — gather_tunnel_data","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/gather_tunnel_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather data columns into key-value pairs — gather_tunnel_data","text":"","code":"library(pathviewr)  ## Import the Motive example data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  ## First use relabel_viewr_axes() to rename these variables using _length, ## _width, and _height instead motive_data_relabeled <- relabel_viewr_axes(motive_data)  ## Now use gather_tunnel_data() to gather colums into tidy format motive_data_gathered <- gather_tunnel_data(motive_data_relabeled)  ## Column names reflect the way in which data were reformatted: names(motive_data_gathered) #>  [1] \"frame\"             \"time_sec\"          \"subject\"           #>  [4] \"position_length\"   \"position_width\"    \"position_height\"   #>  [7] \"rotation_length\"   \"rotation_width\"    \"rotation_height\"   #> [10] \"rotation_real\"     \"mean_marker_error\""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_2d_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an angle in 2D space — get_2d_angle","title":"Compute an angle in 2D space — get_2d_angle","text":"Compute angle 2D space","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_2d_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an angle in 2D space — get_2d_angle","text":"","code":"get_2d_angle(x1, y1, x2, y2, x3, y3)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_2d_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an angle in 2D space — get_2d_angle","text":"x1 x-coordinate first point y1 y-coordinate first point x2 x-coordinate second point (vertex) y2 y-coordinate second point (vertex) x3 x-coordinate third point y3 y-coordinate third point","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_2d_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an angle in 2D space — get_2d_angle","text":"numeric vector provides angular measurement degrees.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_2d_angle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute an angle in 2D space — get_2d_angle","text":"Everything supplied arguments must numeric values vectors numeric values. second point (x2, y2) treated vertex, angle three points 2D space computed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_2d_angle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute an angle in 2D space — get_2d_angle","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_2d_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an angle in 2D space — get_2d_angle","text":"","code":"get_2d_angle(   0, 1,   0, 0,   1, 0) #> [1] 90"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an angle in 3D space — get_3d_angle","title":"Compute an angle in 3D space — get_3d_angle","text":"Compute angle 3D space","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an angle in 3D space — get_3d_angle","text":"","code":"get_3d_angle(x1, y1, z1, x2, y2, z2, x3, y3, z3)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an angle in 3D space — get_3d_angle","text":"x1 x-coordinate first point y1 y-coordinate first point z1 z-coordinate first point x2 x-coordinate second point (vertex) y2 y-coordinate second point (vertex) z2 y-coordinate second point (vertex) x3 x-coordinate third point y3 y-coordinate third point z3 z-coordinate third point","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an angle in 3D space — get_3d_angle","text":"numeric vector provides angular measurement degrees.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_angle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute an angle in 3D space — get_3d_angle","text":"Everything supplied arguments must numeric values vectors numeric values. second point (x2, y2, z2) treated vertex, angle three points 3D space computed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_angle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute an angle in 3D space — get_3d_angle","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an angle in 3D space — get_3d_angle","text":"","code":"get_3d_angle(   0, 1, 0,   0, 0, 0,   1, 0, 0) #> [1] 90"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_cross_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the cross product of two 3D vectors — get_3d_cross_prod","title":"Compute the cross product of two 3D vectors — get_3d_cross_prod","text":"Compute cross product two 3D vectors","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_cross_prod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the cross product of two 3D vectors — get_3d_cross_prod","text":"","code":"get_3d_cross_prod(v1, v2)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_cross_prod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the cross product of two 3D vectors — get_3d_cross_prod","text":"v1 First vector, c(x,y,z) v2 Second vector, c(x,y,z)","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_cross_prod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the cross product of two 3D vectors — get_3d_cross_prod","text":"vector length 3 describes cross-product","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_cross_prod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the cross product of two 3D vectors — get_3d_cross_prod","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_3d_cross_prod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the cross product of two 3D vectors — get_3d_cross_prod","text":"","code":"v1 <- c(1, 1, 3) v2 <- c(3, 1, 3) get_3d_cross_prod(v1, v2) #> [1]  0  6 -2"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_dist_point_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute distance between a point and a line — get_dist_point_line","title":"Compute distance between a point and a line — get_dist_point_line","text":"Compute distance point line","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_dist_point_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute distance between a point and a line — get_dist_point_line","text":"","code":"get_dist_point_line(point, line_coord1, line_coord2)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_dist_point_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute distance between a point and a line — get_dist_point_line","text":"point 2D 3D coordinates point c(x,y) c(x,y,z) line_coord1 2D 3D coordinates one point line c(x,y) c(x,y,z) line_coord2 2D 3D coordinates second point line c(x,y) c(x,y,z)","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_dist_point_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute distance between a point and a line — get_dist_point_line","text":"numeric vector length 1 provides euclidean distance point line.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_dist_point_line.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute distance between a point and a line — get_dist_point_line","text":"function accepts 2D coordinates 3D coordinates, note dimensions supplied arguments must match; coordinates must 2D must 3D.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_dist_point_line.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute distance between a point and a line — get_dist_point_line","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_dist_point_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute distance between a point and a line — get_dist_point_line","text":"","code":"## 2D case get_dist_point_line(   point = c(0, 0),   line_coord1 = c(1, 0),   line_coord2 = c(1, 5) ) #> [1] 1  ## 3D case get_dist_point_line(   point = c(0, 0, 0),   line_coord1 = c(1, 0, 0),   line_coord2 = c(1, 5, 0) ) #> [1] 1"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_full_trajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Retain trajectories that span a selected region of interest — get_full_trajectories","title":"Retain trajectories that span a selected region of interest — get_full_trajectories","text":"Specify minimum span selected region interest keep trajectories wider span go one end region.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_full_trajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retain trajectories that span a selected region of interest — get_full_trajectories","text":"","code":"get_full_trajectories(obj_name, span = 0.8, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_full_trajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retain trajectories that span a selected region of interest — get_full_trajectories","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" span Span use; must numeric 0 1 ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_full_trajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retain trajectories that span a selected region of interest — get_full_trajectories","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") trajectories span region interest retained. Data labeled direction  (either \"leftwards\" \"rightwards\") respect starting ending position_length values direction column.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_full_trajectories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retain trajectories that span a selected region of interest — get_full_trajectories","text":"trajectories may observations exactly beginning end region interest, may necessary allow trajectories slightly shorter range selected region interest. span parameter function handles . supplying numeric proportion 0 1, user may allow trajectories span proportion selected region. example, setting span = 0.95 keep trajectories span 95% length selected region interest. Setting span = 1 (recommended) strictly keep trajectories start end exact cut-offs selected region interest. reasons, spans 0.99 0.95 generally recommended.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_full_trajectories.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retain trajectories that span a selected region of interest — get_full_trajectories","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_full_trajectories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retain trajectories that span a selected region of interest — get_full_trajectories","text":"","code":"motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr'))  ## Clean the file. It is generally recommended to clean up to the ## \"separate\" step before running select_x_percent(). motive_separated <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data() %>%   trim_tunnel_outliers() %>%   rotate_tunnel() %>%   select_x_percent(desired_percent = 50) %>%   separate_trajectories(max_frame_gap = \"autodetect\",                         frame_rate_proportion = 0.1) #> autodetect is an experimental feature -- please report issues.  ## Now retain only the \"full\" trajectories that span ## across 0.95 of the range of position_length motive_full <-   motive_separated %>%   get_full_trajectories(span = 0.95)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_header_viewr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract header info from imported viewr object — get_header_viewr","title":"Extract header info from imported viewr object — get_header_viewr","text":"function quickly return information stored header original data file imported via pathviewr's read_ functions.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_header_viewr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract header info from imported viewr object — get_header_viewr","text":"","code":"get_header_viewr(obj_name, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_header_viewr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract header info from imported viewr object — get_header_viewr","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" pathviewr_steps ... Additional arguments may passed pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_header_viewr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract header info from imported viewr object — get_header_viewr","text":"value header attribute, NULL exact match found one partial match found.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_header_viewr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract header info from imported viewr object — get_header_viewr","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_header_viewr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract header info from imported viewr object — get_header_viewr","text":"","code":"library(pathviewr)  ## Import the Motive example data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  ## Now display the Header information get_header_viewr(motive_data) #>                 metadata                      value #> 1         Format Version                       1.23 #> 2              Take Name  sept-18_mixed-group_16-30 #> 3             Take Notes                            #> 4     Capture Frame Rate                 100.000000 #> 5      Export Frame Rate                 100.000000 #> 6     Capture Start Time 2019-09-18 04.30.02.695 PM #> 7   Total Frames in Take                     190951 #> 8  Total Exported Frames                     190951 #> 9          Rotation Type                 Quaternion #> 10          Length Units                     Meters #> 11      Coordinate Space                     Global"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the spatial frequency of visual stimuli from the subject's\nperspective in an experimental tunnel. — get_sf","title":"Estimate the spatial frequency of visual stimuli from the subject's\nperspective in an experimental tunnel. — get_sf","text":"Estimate spatial frequency visual stimuli subject's perspective experimental tunnel.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the spatial frequency of visual stimuli from the subject's\nperspective in an experimental tunnel. — get_sf","text":"","code":"get_sf(obj_name)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the spatial frequency of visual stimuli from the subject's\nperspective in an experimental tunnel. — get_sf","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" vis_angles_calculated.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the spatial frequency of visual stimuli from the subject's\nperspective in an experimental tunnel. — get_sf","text":"tibble data.frame added variables sf_pos, sf_neg, sf_end. angle.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the spatial frequency of visual stimuli from the subject's\nperspective in an experimental tunnel. — get_sf","text":"get_sf() assumes following: subject's gaze fixed point either side tunnel minimizes distance visual stimuli therefore maximizes visual angles. subject's head facing parallel length axis tunnel. Visual perception functions future versions pathviewr integrate head orientation coordinates. Spatial frequency reported cycles/degree inverse visual angle (degrees/cycle).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_sf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate the spatial frequency of visual stimuli from the subject's\nperspective in an experimental tunnel. — get_sf","text":"Eric R. Press","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the spatial frequency of visual stimuli from the subject's\nperspective in an experimental tunnel. — get_sf","text":"","code":"## Import sample data from package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr')) flydra_data <-   read_flydra_mat(system.file(\"extdata\", \"pathviewr_flydra_example_data.mat\",                               package = 'pathviewr'),                               subject_name = \"birdie_sanders\")   ## Process data up to and including get_vis_angle() motive_data_full <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data() %>%   trim_tunnel_outliers() %>%   rotate_tunnel() %>%   select_x_percent(desired_percent = 50) %>%   separate_trajectories(max_frame_gap = \"autodetect\") %>%   get_full_trajectories(span = 0.95) %>%   insert_treatments(tunnel_config = \"v\",                    perch_2_vertex = 0.4,                    vertex_angle = 90,                    tunnel_length = 2,                    stim_param_lat_pos = 0.1,                    stim_param_lat_neg = 0.1,                    stim_param_end_pos = 0.3,                    stim_param_end_neg = 0.3,                    treatment = \"lat10_end_30\") %>%   calc_min_dist_v(simplify_output = TRUE) %>%   get_vis_angle() %>%    ## Now calculate the spatial frequencies   get_sf() #> autodetect is an experimental feature -- please report issues.    flydra_data_full <-   flydra_data %>%   redefine_tunnel_center(length_method = \"middle\",                         height_method = \"user-defined\",                         height_zero = 1.44) %>%   select_x_percent(desired_percent = 50) %>%   separate_trajectories(max_frame_gap = \"autodetect\") %>%   get_full_trajectories(span = 0.95) %>%   insert_treatments(tunnel_config = \"box\",                    tunnel_length = 3,                    tunnel_width = 1,                    stim_param_lat_pos = 0.1,                    stim_param_lat_neg = 0.1,                    stim_param_end_pos = 0.3,                    stim_param_end_neg = 0.3,                    treatment = \"lat10_end_30\") %>%   calc_min_dist_box() %>%   get_vis_angle() %>%    ## Now calculate the spatial frequencies   get_sf() #> autodetect is an experimental feature -- please report issues."},{"path":"https://docs.ropensci.org/pathviewr/reference/get_traj_velocities.html","id":null,"dir":"Reference","previous_headings":"","what":"Recompute trajectory-specific velocities — get_traj_velocities","title":"Recompute trajectory-specific velocities — get_traj_velocities","text":"Recompute trajectory-specific velocities","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_traj_velocities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recompute trajectory-specific velocities — get_traj_velocities","text":"","code":"get_traj_velocities(   obj_name,   time_col = \"time_sec\",   length_col = \"position_length\",   width_col = \"position_width\",   height_col = \"position_height\",   set_init_vel_zero = FALSE,   velocity_min = NA,   velocity_max = NA )"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_traj_velocities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recompute trajectory-specific velocities — get_traj_velocities","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" time_col Name column containing time length_col Name column containing length dimension width_col Name column containing width dimension height_col Name column containing height dimension set_init_vel_zero first value zero can duplicate second velocity value? Defaults FALSE. velocity_min data certain velocity filtered object? , enter numeric. , keep NA. velocity_max data certain velocity filtered object? , enter numeric. , keep NA.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_traj_velocities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recompute trajectory-specific velocities — get_traj_velocities","text":"add_to_viewr TRUE, additional columns appended input viewr object. FALSE, standalone tibble created. Either way, \"instantaneous\" velocity computed difference position divided difference time successive row encountered. Additionally, velocities along three position axes computed provided additional columns.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_traj_velocities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recompute trajectory-specific velocities — get_traj_velocities","text":"Instantaneous velocity truly \"instantaneous\" rather approximated change distance divided change time one observation (row) previous observation (row). component velocity computed (.e. per axis) along overall velocity subject.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_traj_velocities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recompute trajectory-specific velocities — get_traj_velocities","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_velocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get instantaneous velocity for subjects — get_velocity","title":"Get instantaneous velocity for subjects — get_velocity","text":"Velocity (overall per-axis) computed row data (see Details)","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_velocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get instantaneous velocity for subjects — get_velocity","text":"","code":"get_velocity(   obj_name,   time_col = \"time_sec\",   length_col = \"position_length\",   width_col = \"position_width\",   height_col = \"position_height\",   add_to_viewr = TRUE,   velocity_min = NA,   velocity_max = NA,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_velocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get instantaneous velocity for subjects — get_velocity","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" time_col Name column containing time length_col Name column containing length dimension width_col Name column containing width dimension height_col Name column containing height dimension add_to_viewr Default TRUE; velocity data added new columns function create new simpler object? velocity_min data certain velocity filtered object? , enter numeric. , keep NA. velocity_max data certain velocity filtered object? , enter numeric. , keep NA. ... Additional arguments passed pathviewr functions.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_velocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get instantaneous velocity for subjects — get_velocity","text":"add_to_viewr TRUE, additional columns appended input viewr object. FALSE, standalone tibble created. Either way, \"instantaneous\" velocity computed difference position divided difference time successive row encountered. Additionally, velocities along three position axes computed provided additional columns.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_velocity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get instantaneous velocity for subjects — get_velocity","text":"Instantaneous velocity truly \"instantaneous\" rather approximated change distance divided change time one observation (row) previous observation (row). component velocity computed (.e. per axis) along overall velocity subject.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_velocity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get instantaneous velocity for subjects — get_velocity","text":"Vikram B. Baliga Melissa S. Armstrong","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_velocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get instantaneous velocity for subjects — get_velocity","text":"","code":"## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  ## Clean the file. It is generally recommended to clean up to the ## \"standarization\" step before running get_velocity().  motive_cleaned <-    motive_data %>%    relabel_viewr_axes() %>%    gather_tunnel_data() %>%    trim_tunnel_outliers() %>%    rotate_tunnel()  ## Now compute velocity and add as columns  motive_velocity_added <-    motive_cleaned %>%    get_velocity(add_to_viewr = TRUE)  ## Or set add_to_viewr to FALSE for a standalone object  motive_velocity_standalone <-    motive_cleaned %>%    get_velocity(add_to_viewr = TRUE)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_vis_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate visual angles from a subject's perspective in an experimental tunnel — get_vis_angle","title":"Estimate visual angles from a subject's perspective in an experimental tunnel — get_vis_angle","text":"Estimate visual angles subject's perspective experimental tunnel","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_vis_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate visual angles from a subject's perspective in an experimental tunnel — get_vis_angle","text":"","code":"get_vis_angle(obj_name)"},{"path":"https://docs.ropensci.org/pathviewr/reference/get_vis_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate visual angles from a subject's perspective in an experimental tunnel — get_vis_angle","text":"obj_name input viewr object; tibble data.frame attributes pathviewr_steps include \"viewr\" min_dist_calculated.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_vis_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate visual angles from a subject's perspective in an experimental tunnel — get_vis_angle","text":"tibble data.frame added variables vis_angle_pos_rad, vis_angle_pos_deg, vis_angle_neg_rad, vos_angle_neg_deg, vis_angle_end_rad, vis_angle_end_deg.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_vis_angle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate visual angles from a subject's perspective in an experimental tunnel — get_vis_angle","text":"get_vis_angle() assumes following: subject's gaze fixed point either side tunnel minimizes distance visual stimuli therefore maximizes visual angles. subject's head facing parallel length axis tunnel. Visual perception functions future versions pathviewr integrate head orientation coordinates. Angles reported radians/cycle (vis_angle_pos_rad) degrees/cycle (vis_angle_pos_deg).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/get_vis_angle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate visual angles from a subject's perspective in an experimental tunnel — get_vis_angle","text":"Eric R. Press","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/get_vis_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate visual angles from a subject's perspective in an experimental tunnel — get_vis_angle","text":"","code":"## Import sample data from package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr')) flydra_data <-   read_flydra_mat(system.file(\"extdata\", \"pathviewr_flydra_example_data.mat\",                               package = 'pathviewr'),                               subject_name = \"birdie_sanders\")   ## Process data up to and including get_min_dist() motive_data_full <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data() %>%   trim_tunnel_outliers() %>%   rotate_tunnel() %>%   select_x_percent(desired_percent = 50) %>%   separate_trajectories(max_frame_gap = \"autodetect\") %>%   get_full_trajectories(span = 0.95) %>%   insert_treatments(tunnel_config = \"v\",                    perch_2_vertex = 0.4,                    vertex_angle = 90,                    tunnel_length = 2,                    stim_param_lat_pos = 0.1,                    stim_param_lat_neg = 0.1,                    stim_param_end_pos = 0.3,                    stim_param_end_neg = 0.3,                    treatment = \"lat10_end_30\") %>%   calc_min_dist_v(simplify_output = TRUE) %>%    ## Now calculate the visual angles   get_vis_angle() #> autodetect is an experimental feature -- please report issues.    flydra_data_full <-   flydra_data %>%   redefine_tunnel_center(length_method = \"middle\",                         height_method = \"user-defined\",                         height_zero = 1.44) %>%   select_x_percent(desired_percent = 50) %>%   separate_trajectories(max_frame_gap = \"autodetect\") %>%   get_full_trajectories(span = 0.95) %>%   insert_treatments(tunnel_config = \"box\",                    tunnel_length = 3,                    tunnel_width = 1,                    stim_param_lat_pos = 0.1,                    stim_param_lat_neg = 0.1,                    stim_param_end_pos = 0.3,                    stim_param_end_neg = 0.3,                    treatment = \"lat10_end_30\") %>%   calc_min_dist_box() %>%     ## Now calculate the visual angles   get_vis_angle() #> autodetect is an experimental feature -- please report issues."},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch import and clean files — import_and_clean_batch","title":"Batch import and clean files — import_and_clean_batch","text":"Like clean_viewr_batch(), import first step ","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch import and clean files — import_and_clean_batch","text":"","code":"import_and_clean_batch(   file_path_list,   import_method = c(\"flydra\", \"motive\"),   file_id = NA,   subject_name = NULL,   frame_rate = NULL,   simplify_marker_naming = TRUE,   import_messaging = FALSE,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch import and clean files — import_and_clean_batch","text":"file_path_list list file paths leading files imported. import_method Either \"flydra\" \"motive\" file_id (Optional) identifier file. supplied, defaults basename(file_name). subject_name Flydra, subject name applied files frame_rate Flydra, frame rate applied files simplify_marker_naming Motive, Markers encountered, renamed \"Subject:marker\" \"marker\"? Defaults TRUE import_messaging function report time file processed? ... Additional arguments specify data cleaned.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch import and clean files — import_and_clean_batch","text":"list viewr objects (tibble data.frame attribute pathviewr_steps includes \"viewr\") passed corresponding cleaning functions.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_batch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batch import and clean files — import_and_clean_batch","text":"viewr objects list, e.g. object generated import_batch(). See clean_viewr() details cleaning steps handled /refer corresponding cleaning functions .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_batch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Batch import and clean files — import_and_clean_batch","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch import and clean files — import_and_clean_batch","text":"","code":"## Since we only have one example file of each type provided ## in pathviewr, we will simply import the same example multiple ## times to simulate batch importing. Replace the contents of ## the following list with your own list of files to be imported.  ## Make a list of the same example file 3x import_list <-   c(rep(     system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                 package = 'pathviewr'),     3   ))  ## Batch import motive_batch_imports <-   import_batch(import_list,                import_method = \"motive\",                import_messaging = TRUE) #> File 1 imported. #> File 2 imported. #> File 3 imported.  ## Batch cleaning of these imported files ## via clean_viewr_batch() motive_batch_cleaned <-   clean_viewr_batch(     file_announce = TRUE,     motive_batch_imports,     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> autodetect is an experimental feature -- please report issues. #> File 1 has been cleaned successfully. #> autodetect is an experimental feature -- please report issues. #> File 2 has been cleaned successfully. #> autodetect is an experimental feature -- please report issues. #> File 3 has been cleaned successfully.  ## Alternatively, use import_and_clean_batch() to ## combine import with cleaning on a batch of files motive_batch_import_and_clean <-   import_and_clean_batch(     import_list,     import_method = \"motive\",     import_messaging = TRUE,     motive_batch_imports,     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> File 1 imported. #> File 2 imported. #> File 3 imported. #> autodetect is an experimental feature -- please report issues. #> autodetect is an experimental feature -- please report issues. #> autodetect is an experimental feature -- please report issues.  ## Each of these lists of objects can be bound into ## one viewr object (i.e. one tibble) via ## bind_viewr_objects() motive_bound_one <-   bind_viewr_objects(motive_batch_cleaned)  motive_bound_two <-   bind_viewr_objects(motive_batch_import_and_clean)  ## Either route results in the same object ultimately: identical(motive_bound_one, motive_bound_two) #> [1] TRUE"},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_viewr.html","id":null,"dir":"Reference","previous_headings":"","what":"Import + clean_viewr() — import_and_clean_viewr","title":"Import + clean_viewr() — import_and_clean_viewr","text":"Import file , akin clean_viewr, run many cleaning steps desired.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_viewr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import + clean_viewr() — import_and_clean_viewr","text":"","code":"import_and_clean_viewr(   file_name,   file_id = NA,   relabel_viewr_axes = TRUE,   gather_tunnel_data = TRUE,   trim_tunnel_outliers = TRUE,   standardization_option = \"rotate_tunnel\",   get_velocity = TRUE,   select_x_percent = TRUE,   rename_viewr_characters = FALSE,   separate_trajectories = TRUE,   get_full_trajectories = TRUE,   fill_traj_gaps = FALSE,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_viewr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import + clean_viewr() — import_and_clean_viewr","text":"file_name Target file file_id Optional relabel_viewr_axes default TRUE, axes relabeled? gather_tunnel_data default TRUE, tunnel data gathered? trim_tunnel_outliers default TRUE, outliers trimmed? standardization_option default \"rotate_tunnel\"; standardization option used? See Details . get_velocity default TRUE, velocity computed? select_x_percent default TRUE, region interest selected? rename_viewr_characters default FALSE, subjects renamed? separate_trajectories default TRUE, trajectories defined? get_full_trajectories default TRUE, full trajectories retained? fill_traj_gaps default FALSE, gaps trajectories filled? ... Additional arguments passed corresponding functions.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_viewr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import + clean_viewr() — import_and_clean_viewr","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") passed several pathviewr functions desired user, resulting data cleaned ready analyses.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_viewr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import + clean_viewr() — import_and_clean_viewr","text":"argument corresponds standalone function pathviewr. E.g. parameter relabel_viewr_axes allows user choose whether pathviewr::relabel_viewr_axes() run internally. user desire use non-default parameter values functions included , supplied function additional arguments formatted exactly appear corresponding function(s). E.g. \"autodetect\" feature pathviewr::separate_trajectories() desired, add argument max_frame_gap = \"autodetect\" arguments supplied function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_viewr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import + clean_viewr() — import_and_clean_viewr","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_and_clean_viewr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import + clean_viewr() — import_and_clean_viewr","text":"","code":"library(pathviewr)  ## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  motive_full <-   motive_data %>%   clean_viewr(desired_percent = 50,               max_frame_gap = \"autodetect\",               span = 0.95) #> autodetect is an experimental feature -- please report issues.  ## Alternatively, used the import_and_clean_viewr() ## function to combine these steps motive_import_and_clean <-   import_and_clean_viewr(     file_name = system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                             package = 'pathviewr'),     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> autodetect is an experimental feature -- please report issues."},{"path":"https://docs.ropensci.org/pathviewr/reference/import_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch import of files for either Motive or Flydra (but not a mix of both) — import_batch","title":"Batch import of files for either Motive or Flydra (but not a mix of both) — import_batch","text":"Batch import files either Motive Flydra (mix )","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch import of files for either Motive or Flydra (but not a mix of both) — import_batch","text":"","code":"import_batch(   file_path_list,   import_method = c(\"flydra\", \"motive\"),   file_id = NA,   subject_name = NULL,   frame_rate = NULL,   simplify_marker_naming = TRUE,   import_messaging = FALSE,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/import_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch import of files for either Motive or Flydra (but not a mix of both) — import_batch","text":"file_path_list list file paths import_method Either \"flydra\" \"motive\" file_id Optional subject_name Flydra, assigned subject name frame_rate Flydra, assigned frame rate simplify_marker_naming default TRUE; Motive, whether marker naming simplified import_messaging default FALSE; function report time file imported? ... Additional arguments (may remove needed)","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch import of files for either Motive or Flydra (but not a mix of both) — import_batch","text":"list viewr objects (tibble data.frame attribute pathviewr_steps includes \"viewr\").","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_batch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batch import of files for either Motive or Flydra (but not a mix of both) — import_batch","text":"Refer read_motive_csv() read_flydra_mat() details data import methods.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/import_batch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Batch import of files for either Motive or Flydra (but not a mix of both) — import_batch","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/import_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch import of files for either Motive or Flydra (but not a mix of both) — import_batch","text":"","code":"## Since we only have one example file of each type provided ## in pathviewr, we will simply import the same example multiple ## times to simulate batch importing. Replace the contents of ## the following list with your own list of files to be imported.  ## Make a list of the same example file 3x import_list <-   c(rep(     system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                 package = 'pathviewr'),     3   ))  ## Batch import motive_batch_imports <-   import_batch(import_list,                import_method = \"motive\",                import_messaging = TRUE) #> File 1 imported. #> File 2 imported. #> File 3 imported.  ## Batch cleaning of these imported files ## via clean_viewr_batch() motive_batch_cleaned <-   clean_viewr_batch(     file_announce = TRUE,     motive_batch_imports,     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> autodetect is an experimental feature -- please report issues. #> File 1 has been cleaned successfully. #> autodetect is an experimental feature -- please report issues. #> File 2 has been cleaned successfully. #> autodetect is an experimental feature -- please report issues. #> File 3 has been cleaned successfully.  ## Alternatively, use import_and_clean_batch() to ## combine import with cleaning on a batch of files motive_batch_import_and_clean <-   import_and_clean_batch(     import_list,     import_method = \"motive\",     import_messaging = TRUE,     motive_batch_imports,     desired_percent = 50,     max_frame_gap = \"autodetect\",     span = 0.95   ) #> File 1 imported. #> File 2 imported. #> File 3 imported. #> autodetect is an experimental feature -- please report issues. #> autodetect is an experimental feature -- please report issues. #> autodetect is an experimental feature -- please report issues.  ## Each of these lists of objects can be bound into ## one viewr object (i.e. one tibble) via ## bind_viewr_objects() motive_bound_one <-   bind_viewr_objects(motive_batch_cleaned)  motive_bound_two <-   bind_viewr_objects(motive_batch_import_and_clean)  ## Either route results in the same object ultimately: identical(motive_bound_one, motive_bound_two) #> [1] TRUE"},{"path":"https://docs.ropensci.org/pathviewr/reference/insert_treatments.html","id":null,"dir":"Reference","previous_headings":"","what":"Inserts treatment and experiment information — insert_treatments","title":"Inserts treatment and experiment information — insert_treatments","text":"Adds information treatment experimental set viewr objects analysis pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/insert_treatments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inserts treatment and experiment information — insert_treatments","text":"","code":"insert_treatments(   obj_name,   tunnel_config = \"box\",   perch_2_vertex = NULL,   vertex_angle = NULL,   tunnel_width = NULL,   tunnel_length = NULL,   stim_param_lat_pos = NULL,   stim_param_lat_neg = NULL,   stim_param_end_pos = NULL,   stim_param_end_neg = NULL,   treatment = NULL )"},{"path":"https://docs.ropensci.org/pathviewr/reference/insert_treatments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inserts treatment and experiment information — insert_treatments","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" tunnel_config configuration experimental tunnel. Currently, pathviewr supports rectangular \"box\" V-shaped tunnel configurations. perch_2_vertex using V-shaped tunnel, vertical distance vertex height perches. tunnel perches, insert vertical distance vertex height origin (0,0,0). vertex_angle using V-shaped tunnel, angle vertex (degrees) vertex_angle defaults 90. tunnel_width using box-shaped tunnel, width tunnel. tunnel_length length tunnel. stim_param_lat_pos size stimulus lateral positive wall tunnel. Eg. 10cm wide gratings, stim_param_lat_pos = 0.1. stim_param_lat_neg size stimulus lateral negative wall tunnel.. stim_param_end_pos size stimulus end positive wall tunnel. stim_param_end_neg size stimulus end negative wall tunnel. treatment name treatment assigned rows viewr object. Currently able accept single treatment per viewr data object.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/insert_treatments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inserts treatment and experiment information — insert_treatments","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"treatments added\"). Depending argument tunnel_config, viewr object also includes columns storing values supplied arguments. experimental information also stored viewr object's metadata","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/insert_treatments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inserts treatment and experiment information — insert_treatments","text":"length measurements reported meters.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/insert_treatments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inserts treatment and experiment information — insert_treatments","text":"Eric R. Press","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/insert_treatments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inserts treatment and experiment information — insert_treatments","text":"","code":"## Import sample data from package  motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr'))  flydra_data <-  read_flydra_mat(system.file(\"extdata\", \"pathviewr_flydra_example_data.mat\",                               package = 'pathviewr'),                               subject_name = \"birdie_sanders\")    ## Clean data up to and including get_full_trajectories() motive_data_full <-  motive_data %>%  relabel_viewr_axes() %>%  gather_tunnel_data() %>%  trim_tunnel_outliers() %>%  rotate_tunnel() %>%  select_x_percent(desired_percent = 50) %>%  separate_trajectories(max_frame_gap = \"autodetect\") %>%  get_full_trajectories(span = 0.95) #> autodetect is an experimental feature -- please report issues.   flydra_data_full <-   flydra_data %>%   redefine_tunnel_center(length_method = \"middle\",                         height_method = \"user-defined\",                         height_zero = 1.44) %>%   select_x_percent(desired_percent = 50) %>%   separate_trajectories(max_frame_gap = \"autodetect\") %>%   get_full_trajectories(span = 0.95) #> autodetect is an experimental feature -- please report issues.   ## Now add information about the experimental configuration. In this example, ## a V-shaped tunnel in which the vertex is 90deg and lies 0.40m below the ## origin. The visual stimuli on the lateral and end walls have a cycle ## length of 0.1m and 0.3m respectively, and the treatment is labeled ## \"lat10_end30\"  motive_v <- motive_data_full %>%  insert_treatments(tunnel_config = \"v\",                    perch_2_vertex = 0.4,                    vertex_angle = 90,                    tunnel_length = 2,                    stim_param_lat_pos = 0.1,                    stim_param_lat_neg = 0.1,                    stim_param_end_pos = 0.3,                    stim_param_end_neg = 0.3,                    treatment = \"lat10_end_30\")  # For an experiment using the box-shaped configuration where the tunnel is 1m # wide and 3m long and the visual stimuli on the lateral and end walls have a # cycle length of 0.2 and 0.3m, respectively, and the treatment is labeled # \"lat20_end30\".  flydra_box <-  flydra_data_full %>%  insert_treatments(tunnel_config = \"box\",                    tunnel_width = 1,                    tunnel_length = 3,                    stim_param_lat_pos = 0.2,                    stim_param_lat_neg = 0.2,                    stim_param_end_pos = 0.3,                    stim_param_end_neg = 0.3,                    treatment = \"lat20_end30\")  ## Check out the new columns in the resulting objects names(motive_v) #>  [1] \"tunnel_config\"      \"perch_2_vertex\"     \"vertex_angle\"       #>  [4] \"tunnel_length\"      \"stim_param_lat_pos\" \"stim_param_lat_neg\" #>  [7] \"stim_param_end_pos\" \"stim_param_end_neg\" \"treatment\"          #> [10] \"frame\"              \"time_sec\"           \"subject\"            #> [13] \"position_length\"    \"position_width\"     \"position_height\"    #> [16] \"rotation_length\"    \"rotation_width\"     \"rotation_height\"    #> [19] \"rotation_real\"      \"mean_marker_error\"  \"traj_id\"            #> [22] \"file_sub_traj\"      \"traj_length\"        \"start_length\"       #> [25] \"end_length\"         \"length_diff\"        \"start_length_sign\"  #> [28] \"end_length_sign\"    \"direction\"          names(flydra_box) #>  [1] \"tunnel_config\"      \"tunnel_width\"       \"tunnel_length\"      #>  [4] \"stim_param_lat_pos\" \"stim_param_lat_neg\" \"stim_param_end_pos\" #>  [7] \"stim_param_end_neg\" \"treatment\"          \"frame\"              #> [10] \"time_sec\"           \"subject\"            \"position_length\"    #> [13] \"position_width\"     \"position_height\"    \"velocity\"           #> [16] \"length_inst_vel\"    \"width_inst_vel\"     \"height_inst_vel\"    #> [19] \"traj_id\"            \"file_sub_traj\"      \"traj_length\"        #> [22] \"start_length\"       \"end_length\"         \"length_diff\"        #> [25] \"start_length_sign\"  \"end_length_sign\"    \"direction\""},{"path":"https://docs.ropensci.org/pathviewr/reference/pathviewr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pathviewr: Wrangle, Analyze, and Visualize Animal Movement Data — pathviewr-package","title":"pathviewr: Wrangle, Analyze, and Visualize Animal Movement Data — pathviewr-package","text":"Tools import, clean, visualize movement data, particularly motion capture systems Optitrack's 'Motive', Straw Lab's 'Flydra', sources. provide functions remove artifacts, standardize tunnel position tunnel axes, select region interest, isolate specific trajectories, fill gaps trajectory data, calculate 3D per-axis velocity. experiments visual guidance, also provide functions use subject position estimate perception visual stimuli.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/pathviewr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pathviewr: Wrangle, Analyze, and Visualize Animal Movement Data — pathviewr-package","text":"Maintainer: Vikram B. Baliga vbaliga87@gmail.com (ORCID) Authors: Melissa S. Armstrong melissa.armstrong@gmail.com (ORCID) Eric R. Press epress12@gmail.com (ORCID) contributors: Anne-Sophie Bonnet-Lebrun [reviewer] Marco Sciaini [reviewer]","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/pathviewr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"return value, called side effects","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_by_subject.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot trajectories and density plots of position by subject — plot_by_subject","title":"Plot trajectories and density plots of position by subject — plot_by_subject","text":"Plots trajectories generates density plots position subject elevation bird's eye views.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_by_subject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot trajectories and density plots of position by subject — plot_by_subject","text":"","code":"plot_by_subject(obj_name, col_by_treat = FALSE, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_by_subject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot trajectories and density plots of position by subject — plot_by_subject","text":"obj_name viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") passed separate_trajectories() get_full_trajectories(). col_by_treat multiple treatments sessions, color data per treatment session. Treatments must levels column named treatment. ... Additional arguments passed /pathviewr functions.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_by_subject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot trajectories and density plots of position by subject — plot_by_subject","text":"\"bird's eye view\" plot \"elevation view\" plot, made via ggplot2.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_by_subject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot trajectories and density plots of position by subject — plot_by_subject","text":"input viewr object passed separate_trajectories() get_full_trajectories(). Optionally, treatments added levels column named treatment. Two plots produced, one \"bird's eye view\" width length one \"elevation view\" height length. trajectories plotted per subject basis, along density plots width height depending view. col_by_treat = TRUE, data plotted color according treatment trajectory plots density plots.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_by_subject.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot trajectories and density plots of position by subject — plot_by_subject","text":"Melissa S. Armstrong","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_by_subject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot trajectories and density plots of position by subject — plot_by_subject","text":"","code":"library(pathviewr) library(ggplot2) library(magrittr)  if (interactive()) {   ## Import the example Motive data included in the package   motive_data <-     read_motive_csv(system.file(\"extdata\",                                 \"pathviewr_motive_example_data.csv\",                                 package = 'pathviewr'))    ## Clean, isolate, and label trajectories   motive_full <-     motive_data %>%     clean_viewr(desired_percent = 50,                 max_frame_gap = \"autodetect\",                 span = 0.95)    ## Plot all trajectories by subject   motive_full %>%     plot_by_subject()    ## Add treatment information   motive_full$treatment <- c(rep(\"latA\", 100), rep(\"latB\", 100),                              rep(\"latA\", 100), rep(\"latB\", 149))    ## Plot all trajectories by subject, color by treatment   motive_full %>%     plot_by_subject(col_by_treat = TRUE) }"},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_viewr_trajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot each trajectory within a viewr object — plot_viewr_trajectories","title":"Plot each trajectory within a viewr object — plot_viewr_trajectories","text":"Plot trajectory within viewr object","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_viewr_trajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot each trajectory within a viewr object — plot_viewr_trajectories","text":"","code":"plot_viewr_trajectories(   obj_name,   plot_axes = c(\"length\", \"width\"),   multi_plot = FALSE )"},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_viewr_trajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot each trajectory within a viewr object — plot_viewr_trajectories","text":"obj_name viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") passed separate_trajectories() get_full_trajectories(). plot_axes position axes plotted? character vector including exactly two following choices must supplied: length, width, height. Default c(\"length\", \"width\"). multi_plot separate plots (one per trajectory) created one multi-plot grid generated. Defaults FALSE, produces separate plots.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_viewr_trajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot each trajectory within a viewr object — plot_viewr_trajectories","text":"(base-R) series plots single plot (multi_plot =   TRUE) depict trajectory along chosen axes.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_viewr_trajectories.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot each trajectory within a viewr object — plot_viewr_trajectories","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/plot_viewr_trajectories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot each trajectory within a viewr object — plot_viewr_trajectories","text":"","code":"library(pathviewr)  ## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  motive_full <-   motive_data %>%   clean_viewr(desired_percent = 50,               max_frame_gap = \"autodetect\",               span = 0.95) #> autodetect is an experimental feature -- please report issues.  plot_viewr_trajectories(motive_full, multi_plot = FALSE)           plot_viewr_trajectories(motive_full, multi_plot = TRUE)"},{"path":"https://docs.ropensci.org/pathviewr/reference/quick_separate_trajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick version of separate_trajectories() — quick_separate_trajectories","title":"Quick version of separate_trajectories() — quick_separate_trajectories","text":"Mostly meant internal use available nevertheless.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/quick_separate_trajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick version of separate_trajectories() — quick_separate_trajectories","text":"","code":"quick_separate_trajectories(obj_name, max_frame_gap = 1, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/quick_separate_trajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick version of separate_trajectories() — quick_separate_trajectories","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" max_frame_gap Unlike corresponding parameter separate_trajectories, must single numeric . ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/quick_separate_trajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick version of separate_trajectories() — quick_separate_trajectories","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") new column file_sub_traj added, labels trajectories within data concatenating file name, subject name, trajectory number (separated underscores).","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/quick_separate_trajectories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick version of separate_trajectories() — quick_separate_trajectories","text":"function designed separate rows data separately labeled trajectories. max_frame_gap parameter determines trajectories separated. max_frame_gap defines largest permissible gap data new trajectory forced defined. function, single numeric can supplied parameter (unlike case separate_trajectories).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/quick_separate_trajectories.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quick version of separate_trajectories() — quick_separate_trajectories","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/quick_separate_trajectories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick version of separate_trajectories() — quick_separate_trajectories","text":"","code":"## This function is not recommended for general use. ## See separate_trajectories() instead"},{"path":"https://docs.ropensci.org/pathviewr/reference/rad_2_deg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert radians to degrees — rad_2_deg","title":"Convert radians to degrees — rad_2_deg","text":"Convert radians degrees","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rad_2_deg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert radians to degrees — rad_2_deg","text":"","code":"rad_2_deg(rad)"},{"path":"https://docs.ropensci.org/pathviewr/reference/rad_2_deg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert radians to degrees — rad_2_deg","text":"rad Radians (numeric length >= 1)","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rad_2_deg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert radians to degrees — rad_2_deg","text":"angle(s) degrees (numeric vector length)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/rad_2_deg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert radians to degrees — rad_2_deg","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rad_2_deg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert radians to degrees — rad_2_deg","text":"","code":"## One input rad_2_deg(pi/2) #> [1] 90  ## Multiple inputs rad_2_deg(c(pi / 2, pi, 2 * pi)) #> [1]  90 180 360"},{"path":"https://docs.ropensci.org/pathviewr/reference/read_flydra_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from a MAT file exported from Flydra software — read_flydra_mat","title":"Import data from a MAT file exported from Flydra software — read_flydra_mat","text":"read_flydra_mat() designed import data .mat file exported Flydra software. resultant object tibble additionally important metadata stored attributes (see Details).","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_flydra_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from a MAT file exported from Flydra software — read_flydra_mat","text":"","code":"read_flydra_mat(mat_file, file_id = NA, subject_name, frame_rate = 100, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/read_flydra_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from a MAT file exported from Flydra software — read_flydra_mat","text":"mat_file file (path file) .mat format, exported Flydra file_id (Optional) identifier file. supplied, defaults basename(file_name). subject_name Name assigned subject frame_rate capture frame rate session ... Additional arguments may passed pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_flydra_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from a MAT file exported from Flydra software — read_flydra_mat","text":"tibble numerical data columns. first two columns frame numbers time (assumed secs), respectively. Columns 3 5 contain position data. Note unlike behavior read_motive_csv() function produces \"tidy\" data already gathered key-value pairs based subject.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/read_flydra_mat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import data from a MAT file exported from Flydra software — read_flydra_mat","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_flydra_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from a MAT file exported from Flydra software — read_flydra_mat","text":"","code":"library(pathviewr)  ## Import the example Flydra data included in the package flydra_data <-   read_flydra_mat(system.file(\"extdata\", \"pathviewr_flydra_example_data.mat\",                              package = 'pathviewr'),                   subject_name = \"birdie_wooster\")  ## Names of variables in the resulting tibble names(flydra_data) #>  [1] \"frame\"           \"time_sec\"        \"subject\"         \"position_length\" #>  [5] \"position_width\"  \"position_height\" \"velocity\"        \"length_inst_vel\" #>  [9] \"width_inst_vel\"  \"height_inst_vel\"  ## A variety of metadata are stored as attributes. Of particular interest: attr(flydra_data, \"pathviewr_steps\") #> [1] \"viewr\"           \"renamed_tunnel\"  \"gathered_tunnel\""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_motive_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","title":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","text":"read_motive_csv() designed import data CSV exported Optitrack's Motive software. resultant object tibble additionally important metadata stored attributes (see Details).","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_motive_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","text":"","code":"read_motive_csv(file_name, file_id = NA, simplify_marker_naming = TRUE, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/read_motive_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","text":"file_name file (path file) CSV format file_id (Optional) identifier file. supplied, defaults basename(file_name). simplify_marker_naming Markers encountered, renamed \"Subject:marker\" \"marker\"? Defaults TRUE ... Additional arguments passed pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_motive_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","text":"tibble numerical data columns. first two columns frame numbers time (assumed secs), respectively. Columns 3 beyond contain numerical data position rotation rigid bodies /markers appear Motive CSV file. row corresponds position rotation objects given time (frame).","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_motive_csv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","text":"Uses data.table::fread() import data CSV file ultimately store tibble. object also labeled attribute pathviewr_steps value viewr indicate imported pathviewr friendly towards use functions package. Additionally, following metadata stored tibble's attributes: header information Motive CSV file (header), original IDs object (Motive_IDs), name subject data column (subject_names_full) unique values subject names (subject_names_simple), type data (rigid body marker) appears column (data_types_full) overall (data_types_simple), original data column names CSV (d1, d2). See Example example code inspect attributes.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_motive_csv.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","text":"function written read CSVs exported using Motive's Format Version 1.23 guaranteed work versions. Please file Issue Github page encounter problems.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/read_motive_csv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/read_motive_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from a CSV exported from Optitrack's Motive software — read_motive_csv","text":"","code":"library(pathviewr)  ## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  ## Names of variables in the resulting tibble names(motive_data) #>  [1] \"frame\"                      \"time_sec\"                   #>  [3] \"device02_rotation_x\"        \"device02_rotation_y\"        #>  [5] \"device02_rotation_z\"        \"device02_rotation_w\"        #>  [7] \"device02_position_x\"        \"device02_position_y\"        #>  [9] \"device02_position_z\"        \"device02_mean_marker_error\" #> [11] \"device03_rotation_x\"        \"device03_rotation_y\"        #> [13] \"device03_rotation_z\"        \"device03_rotation_w\"        #> [15] \"device03_position_x\"        \"device03_position_y\"        #> [17] \"device03_position_z\"        \"device03_mean_marker_error\" #> [19] \"device05_rotation_x\"        \"device05_rotation_y\"        #> [21] \"device05_rotation_z\"        \"device05_rotation_w\"        #> [23] \"device05_position_x\"        \"device05_position_y\"        #> [25] \"device05_position_z\"        \"device05_mean_marker_error\"  ## A variety of metadata are stored as attributes. Of particular interest: attr(motive_data, \"pathviewr_steps\") #> [1] \"viewr\" attr(motive_data, \"file_id\") #> [1] \"pathviewr_motive_example_data.csv\" attr(motive_data, \"header\") #>                 metadata                      value #> 1         Format Version                       1.23 #> 2              Take Name  sept-18_mixed-group_16-30 #> 3             Take Notes                            #> 4     Capture Frame Rate                 100.000000 #> 5      Export Frame Rate                 100.000000 #> 6     Capture Start Time 2019-09-18 04.30.02.695 PM #> 7   Total Frames in Take                     190951 #> 8  Total Exported Frames                     190951 #> 9          Rotation Type                 Quaternion #> 10          Length Units                     Meters #> 11      Coordinate Space                     Global attr(motive_data, \"Motive_IDs\") #>  [1] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [2] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [3] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [4] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [5] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [6] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [7] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [8] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [9] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [10] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [11] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [12] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [13] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [14] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [15] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [16] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [17] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [18] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [19] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [20] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [21] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [22] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [23] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [24] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" attr(motive_data, \"subject_names_full\") #>  [1] \"device02\" \"device02\" \"device02\" \"device02\" \"device02\" \"device02\" #>  [7] \"device02\" \"device02\" \"device03\" \"device03\" \"device03\" \"device03\" #> [13] \"device03\" \"device03\" \"device03\" \"device03\" \"device05\" \"device05\" #> [19] \"device05\" \"device05\" \"device05\" \"device05\" \"device05\" \"device05\" attr(motive_data, \"subject_names_simple\") #> [1] \"device02\" \"device03\" \"device05\" attr(motive_data, \"motive_data_names\") #> NULL attr(motive_data, \"motive_data_types_full\") #> NULL attr(motive_data, \"motive_data_types_simple\") #> NULL  ## Of course, all attributes can be viewed as a (long) list via: attributes(motive_data) #> $class #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" #>  #> $row.names #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 #> [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 #> [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #> [145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 #> [163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 #> [181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 #> [199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 #> [217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 #> [235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 #> [253] 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 #> [271] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 #> [289] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 #> [307] 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 #> [325] 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 #> [343] 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 #> [361] 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 #> [379] 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 #> [397] 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 #> [415] 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 #> [433] 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 #> [451] 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 #> [469] 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 #> [487] 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 #> [505] 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 #> [523] 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 #> [541] 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 #> [559] 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 #> [577] 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 #> [595] 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 #> [613] 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 #> [631] 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 #> [649] 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 #> [667] 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 #> [685] 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 #> [703] 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 #> [721] 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 #> [739] 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 #> [757] 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 #> [775] 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 #> [793] 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 #> [811] 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 #> [829] 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 #> [847] 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 #> [865] 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 #> [883] 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 #> [901] 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 #> [919] 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 #>  #> $names #>  [1] \"frame\"                      \"time_sec\"                   #>  [3] \"device02_rotation_x\"        \"device02_rotation_y\"        #>  [5] \"device02_rotation_z\"        \"device02_rotation_w\"        #>  [7] \"device02_position_x\"        \"device02_position_y\"        #>  [9] \"device02_position_z\"        \"device02_mean_marker_error\" #> [11] \"device03_rotation_x\"        \"device03_rotation_y\"        #> [13] \"device03_rotation_z\"        \"device03_rotation_w\"        #> [15] \"device03_position_x\"        \"device03_position_y\"        #> [17] \"device03_position_z\"        \"device03_mean_marker_error\" #> [19] \"device05_rotation_x\"        \"device05_rotation_y\"        #> [21] \"device05_rotation_z\"        \"device05_rotation_w\"        #> [23] \"device05_position_x\"        \"device05_position_y\"        #> [25] \"device05_position_z\"        \"device05_mean_marker_error\" #>  #> $.internal.selfref #> <pointer: 0x55f9b664a800> #>  #> $pathviewr_steps #> [1] \"viewr\" #>  #> $file_id #> [1] \"pathviewr_motive_example_data.csv\" #>  #> $file_mtime #> [1] \"2024-03-02 06:10:52 UTC\" #>  #> $frame_rate #> [1] 100 #>  #> $header #>                 metadata                      value #> 1         Format Version                       1.23 #> 2              Take Name  sept-18_mixed-group_16-30 #> 3             Take Notes                            #> 4     Capture Frame Rate                 100.000000 #> 5      Export Frame Rate                 100.000000 #> 6     Capture Start Time 2019-09-18 04.30.02.695 PM #> 7   Total Frames in Take                     190951 #> 8  Total Exported Frames                     190951 #> 9          Rotation Type                 Quaternion #> 10          Length Units                     Meters #> 11      Coordinate Space                     Global #>  #> $Motive_IDs #>  [1] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [2] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [3] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [4] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [5] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [6] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [7] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [8] \"\\\"9E207518D8A311E969D7AB6B1FACE49B\\\"\" #>  [9] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [10] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [11] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [12] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [13] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [14] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [15] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [16] \"\\\"B88E118D8A411E969D7AB6B1FACE49B\\\"\"  #> [17] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [18] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [19] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [20] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [21] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [22] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [23] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #> [24] \"\\\"CDF1C735D8A411E969D7AB6B1FACE49B\\\"\" #>  #> $subject_names_full #>  [1] \"device02\" \"device02\" \"device02\" \"device02\" \"device02\" \"device02\" #>  [7] \"device02\" \"device02\" \"device03\" \"device03\" \"device03\" \"device03\" #> [13] \"device03\" \"device03\" \"device03\" \"device03\" \"device05\" \"device05\" #> [19] \"device05\" \"device05\" \"device05\" \"device05\" \"device05\" \"device05\" #>  #> $subject_names_simple #> [1] \"device02\" \"device03\" \"device05\" #>  #> $data_names #>  [1] \"frame\"                      \"time_sec\"                   #>  [3] \"device02_rotation_x\"        \"device02_rotation_y\"        #>  [5] \"device02_rotation_z\"        \"device02_rotation_w\"        #>  [7] \"device02_position_x\"        \"device02_position_y\"        #>  [9] \"device02_position_z\"        \"device02_mean_marker_error\" #> [11] \"device03_rotation_x\"        \"device03_rotation_y\"        #> [13] \"device03_rotation_z\"        \"device03_rotation_w\"        #> [15] \"device03_position_x\"        \"device03_position_y\"        #> [17] \"device03_position_z\"        \"device03_mean_marker_error\" #> [19] \"device05_rotation_x\"        \"device05_rotation_y\"        #> [21] \"device05_rotation_z\"        \"device05_rotation_w\"        #> [23] \"device05_position_x\"        \"device05_position_y\"        #> [25] \"device05_position_z\"        \"device05_mean_marker_error\" #>  #> $data_types_full #>  [1] \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" #>  [6] \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" #> [11] \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" #> [16] \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" #> [21] \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" \"Rigid Body\" #>  #> $data_types_simple #> [1] \"Rigid Body\" #>  #> $d1 #>  [1] \"\"                  \"\"                  \"Rotation\"          #>  [4] \"Rotation\"          \"Rotation\"          \"Rotation\"          #>  [7] \"Position\"          \"Position\"          \"Position\"          #> [10] \"Mean Marker Error\" \"Rotation\"          \"Rotation\"          #> [13] \"Rotation\"          \"Rotation\"          \"Position\"          #> [16] \"Position\"          \"Position\"          \"Mean Marker Error\" #> [19] \"Rotation\"          \"Rotation\"          \"Rotation\"          #> [22] \"Rotation\"          \"Position\"          \"Position\"          #> [25] \"Position\"          \"Mean Marker Error\" #>  #> $d2 #>  [1] \"Frame\"          \"Time (Secondsimport_method #> [1] \"motive\" #>"},{"path":"https://docs.ropensci.org/pathviewr/reference/redefine_tunnel_center.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Redefine center (0, 0, 0,) tunnel data via translating positions along axes.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/redefine_tunnel_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"redefine_tunnel_center(   obj_name,   axes = c(\"position_length\", \"position_width\", \"position_height\"),   length_method = c(\"original\", \"middle\", \"median\", \"user-defined\"),   width_method = c(\"original\", \"middle\", \"median\", \"user-defined\"),   height_method = c(\"original\", \"middle\", \"median\", \"user-defined\"),   length_zero = NA,   width_zero = NA,   height_zero = NA,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/redefine_tunnel_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" axes Names axes centered length_method Method length width_method Method width height_method Method height length_zero User-defined value width_zero User-defined value height_zero User-defined value ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/redefine_tunnel_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") data translated according user's inputs, generally (0, 0,   0,) relocated center tunnel.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/redefine_tunnel_center.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"","text":"_method argument, four choices centering handled: 1) \"original\" keeps axis -- width (possibly) height handled flydra data; 2) \"middle\" middle range data: (min + max) / 2; 3) \"median\" median value data axis. Probably recommended; 4) \"user-defined\" lets user customize (0, 0, 0) point tunnel end . _zero argument subtracted corresponding axis' data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/redefine_tunnel_center.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/redefine_tunnel_center.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"","text":"","code":"## Import the Flydra example data included in ## the package flydra_data <-   read_flydra_mat(     system.file(\"extdata\",                 \"pathviewr_flydra_example_data.mat\",                 package = 'pathviewr'),     subject_name = \"birdie_wooster\"   )  ## Re-center the Flydra data set. ## Width will be untouched ## Length will use the \"middle\" definition ## And height will be user-defined to be ## zeroed at 1.44 on the original axis flydra_centered <-   flydra_data %>%   redefine_tunnel_center(length_method = \"middle\",                          height_method = \"user-defined\",                          height_zero = 1.44)"},{"path":"https://docs.ropensci.org/pathviewr/reference/relabel_viewr_axes.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel the dimensions as length, width, and height — relabel_viewr_axes","title":"Relabel the dimensions as length, width, and height — relabel_viewr_axes","text":"Axes commonly labeled \"x\", \"y\", \"z\" recording software yet pathviewr functions require labeled \"length\", \"width\", \"height\". relabel_viewr_axes() function takes viewr object allows user rename variables.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/relabel_viewr_axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel the dimensions as length, width, and height — relabel_viewr_axes","text":"","code":"relabel_viewr_axes(   obj_name,   tunnel_length = \"_z\",   tunnel_width = \"_x\",   tunnel_height = \"_y\",   real = \"_w\",   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/relabel_viewr_axes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel the dimensions as length, width, and height — relabel_viewr_axes","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" tunnel_length dimension corresponds tunnel length. Set tunnel_length = \"_z\" default. Argument contain character vector leading underscore (see Details) tunnel_width dimension corresponds tunnel width. Follows conventions tunnel_length defaults tunnel_length = \"_x\" tunnel_height dimension corresponds tunnel height. Follows conventions tunnel_length defaults tunnel_length = \"_y\" real dimension corresponds \"real\" parameter quaternion notation (data \"rotation\" values). Follows conventions tunnel_length defaults real = \"_w\" ... Additional arguments passed read_motive_csv().","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/relabel_viewr_axes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel the dimensions as length, width, and height — relabel_viewr_axes","text":"tibble data.frame variables renamed.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/relabel_viewr_axes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relabel the dimensions as length, width, and height — relabel_viewr_axes","text":"argument must leading underscore (\"_\") argument must entry. E.g. tunnel_length = \"_Y\" replace instances _Y _length names variables.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/relabel_viewr_axes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Relabel the dimensions as length, width, and height — relabel_viewr_axes","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/relabel_viewr_axes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel the dimensions as length, width, and height — relabel_viewr_axes","text":"","code":"library(pathviewr)  ## Import the Motive example data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  ## Names of variables are labeled with _x, _y, _z, which we'd like to rename names(motive_data) #>  [1] \"frame\"                      \"time_sec\"                   #>  [3] \"device02_rotation_x\"        \"device02_rotation_y\"        #>  [5] \"device02_rotation_z\"        \"device02_rotation_w\"        #>  [7] \"device02_position_x\"        \"device02_position_y\"        #>  [9] \"device02_position_z\"        \"device02_mean_marker_error\" #> [11] \"device03_rotation_x\"        \"device03_rotation_y\"        #> [13] \"device03_rotation_z\"        \"device03_rotation_w\"        #> [15] \"device03_position_x\"        \"device03_position_y\"        #> [17] \"device03_position_z\"        \"device03_mean_marker_error\" #> [19] \"device05_rotation_x\"        \"device05_rotation_y\"        #> [21] \"device05_rotation_z\"        \"device05_rotation_w\"        #> [23] \"device05_position_x\"        \"device05_position_y\"        #> [25] \"device05_position_z\"        \"device05_mean_marker_error\"  ## Now use relabel_viewr_axes() to rename these variables using _length, ## _width, and _height instead motive_data_relabeled <-   relabel_viewr_axes(motive_data,                      tunnel_length = \"_z\",                      tunnel_width = \"_x\",                      tunnel_height = \"_y\",                      real = \"_w\")  ## See the result names(motive_data_relabeled) #>  [1] \"frame\"                      \"time_sec\"                   #>  [3] \"device02_rotation_width\"    \"device02_rotation_height\"   #>  [5] \"device02_rotation_length\"   \"device02_rotation_real\"     #>  [7] \"device02_position_width\"    \"device02_position_height\"   #>  [9] \"device02_position_length\"   \"device02_mean_marker_error\" #> [11] \"device03_rotation_width\"    \"device03_rotation_height\"   #> [13] \"device03_rotation_length\"   \"device03_rotation_real\"     #> [15] \"device03_position_width\"    \"device03_position_height\"   #> [17] \"device03_position_length\"   \"device03_mean_marker_error\" #> [19] \"device05_rotation_width\"    \"device05_rotation_height\"   #> [21] \"device05_rotation_length\"   \"device05_rotation_real\"     #> [23] \"device05_position_width\"    \"device05_position_height\"   #> [25] \"device05_position_length\"   \"device05_mean_marker_error\""},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_duplicate_frames.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove any duplicates or aliased frames within trajectories — remove_duplicate_frames","title":"Remove any duplicates or aliased frames within trajectories — remove_duplicate_frames","text":"Remove duplicates aliased frames within trajectories","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_duplicate_frames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove any duplicates or aliased frames within trajectories — remove_duplicate_frames","text":"","code":"remove_duplicate_frames(obj_name)"},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_duplicate_frames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove any duplicates or aliased frames within trajectories — remove_duplicate_frames","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\"","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_duplicate_frames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove any duplicates or aliased frames within trajectories — remove_duplicate_frames","text":"viewr object (tibble data.frame attribute pathviewr_steps.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_duplicate_frames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove any duplicates or aliased frames within trajectories — remove_duplicate_frames","text":"separate_trajectories() get_full_trajectories() must run prior use.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_duplicate_frames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove any duplicates or aliased frames within trajectories — remove_duplicate_frames","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_vel_anomalies.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove any rows which show sharp shifts in velocity that are likely due to\ntracking errors — remove_vel_anomalies","title":"Remove any rows which show sharp shifts in velocity that are likely due to\ntracking errors — remove_vel_anomalies","text":"Remove rows show sharp shifts velocity likely due tracking errors","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_vel_anomalies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove any rows which show sharp shifts in velocity that are likely due to\ntracking errors — remove_vel_anomalies","text":"","code":"remove_vel_anomalies(   obj_name,   target = \"velocity\",   method = \"gesd\",   alpha = 0.05,   max_anoms = 0.2 )"},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_vel_anomalies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove any rows which show sharp shifts in velocity that are likely due to\ntracking errors — remove_vel_anomalies","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" target column target; defaults \"velocity\" method anomaly detection method; see anomalize::anomalize() alpha width \"normal\" range; see anomalize::anomalize() max_anoms max proportion anomalies; see anomalize::anomalize()","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_vel_anomalies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove any rows which show sharp shifts in velocity that are likely due to\ntracking errors — remove_vel_anomalies","text":"viewr object (tibble data.frame attribute pathviewr_steps. Rows large anomalies detected removed. additional columns created.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_vel_anomalies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove any rows which show sharp shifts in velocity that are likely due to\ntracking errors — remove_vel_anomalies","text":"function runs anomalize::anomalize() per-trajectory basis. separate_trajectories() get_full_trajectories() must run prior use.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/remove_vel_anomalies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove any rows which show sharp shifts in velocity that are likely due to\ntracking errors — remove_vel_anomalies","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rename_viewr_characters.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename subjects in the data via pattern detection — rename_viewr_characters","title":"Rename subjects in the data via pattern detection — rename_viewr_characters","text":"Quick utility function use str_replace mutate(across()) batch- rename subjects via pattern detection.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rename_viewr_characters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename subjects in the data via pattern detection — rename_viewr_characters","text":"","code":"rename_viewr_characters(   obj_name,   target_column = \"subject\",   pattern,   replacement = \"\" )"},{"path":"https://docs.ropensci.org/pathviewr/reference/rename_viewr_characters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename subjects in the data via pattern detection — rename_viewr_characters","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" target_column target column; defaults \"subject\" pattern (regex) pattern replaced replacement replacement text. Must character","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rename_viewr_characters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename subjects in the data via pattern detection — rename_viewr_characters","text":"tibble data frame subjects renamed according pattern replacement supplied user.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/rename_viewr_characters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rename subjects in the data via pattern detection — rename_viewr_characters","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rename_viewr_characters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename subjects in the data via pattern detection — rename_viewr_characters","text":"","code":"## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  ## Clean the file. It is generally recommended to clean up to the ## \"gather\" step before running rescale_tunnel_data().  motive_gathered <-    motive_data %>%    relabel_viewr_axes() %>%    gather_tunnel_data()  ## See the subject names  unique(motive_gathered$subject) #> [1] \"device02\" \"device03\" \"device05\"  ## Now rename the subjects. We'll get rid of \"device\" and replace it ## with \"subject\" motive_renamed <-   motive_gathered %>%   rename_viewr_characters(target_column = \"subject\",                           pattern = \"device\",                           replacement = \"subject\")  ## See the new subject names unique(motive_renamed$subject) #> [1] \"subject02\" \"subject03\" \"subject05\""},{"path":"https://docs.ropensci.org/pathviewr/reference/rescale_tunnel_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale position data within a viewr object — rescale_tunnel_data","title":"Rescale position data within a viewr object — rescale_tunnel_data","text":"data exported incorrect scale, apply isometric transformation position data associated mean marker errors (found)","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rescale_tunnel_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale position data within a viewr object — rescale_tunnel_data","text":"","code":"rescale_tunnel_data(obj_name, original_scale = 0.5, desired_scale = 1, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/rescale_tunnel_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale position data within a viewr object — rescale_tunnel_data","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" passed relabel_viewr_axes() gather_tunnel_data() (structured though passed functions). original_scale original scale data exported. See Details unknown. desired_scale desired scale ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rescale_tunnel_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale position data within a viewr object — rescale_tunnel_data","text":"viewr object position data (mean_marker_error data, found) adjusted ratio desired_scale/original_scale.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rescale_tunnel_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rescale position data within a viewr object — rescale_tunnel_data","text":"desired_scale divided original_scale determine scale_ratio internally. original_scale explicitly known, set 1 set desired_scale whatever scaling ratio mind. E.g. setting original_scale 1 desired_scale 0.7 multiply position axis values 0.7. default arguments original_scale = 0.5 desired_scale = 1 apply doubling tunnel size isometrically.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rescale_tunnel_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rescale position data within a viewr object — rescale_tunnel_data","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rescale_tunnel_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale position data within a viewr object — rescale_tunnel_data","text":"","code":"## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  ## Clean the file. It is generally recommended to clean up to the ## \"gather\" step before running rescale_tunnel_data().  motive_gathered <-    motive_data %>%    relabel_viewr_axes() %>%    gather_tunnel_data()  ## Now rescale the tunnel data motive_rescaled <-   motive_gathered %>%   rescale_tunnel_data(original_scale = 0.5,                       desired_scale = 1)  ## See the difference in data range e.g. for length range(motive_rescaled$position_length) #> [1] 0.07131 5.35294 range(motive_gathered$position_length) #> [1] 0.035655 2.676470"},{"path":"https://docs.ropensci.org/pathviewr/reference/rm_by_trajnum.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove subjects by trajectory number — rm_by_trajnum","title":"Remove subjects by trajectory number — rm_by_trajnum","text":"Specify minimum number trajectories subject must complete treatment, trial, session.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rm_by_trajnum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove subjects by trajectory number — rm_by_trajnum","text":"","code":"rm_by_trajnum(   obj_name,   trajnum = 5,   mirrored = FALSE,   treatment1,   treatment2,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/rm_by_trajnum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove subjects by trajectory number — rm_by_trajnum","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\". Trajectories must predefined (.e. via separate_trajectories()). trajnum Minimum number trajectories; must numeric. mirrored data mirrored treatments? , arguments treatment1 treatment2 must also provided, indicating names two mirrored treatments, must meet trajectory threshold specified trajnum. Default FALSE. treatment1 first treatment session threshold must met. treatment2 second treatment session threshold must met. ... Additional arguments passed /pathviewr functions.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rm_by_trajnum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove subjects by trajectory number — rm_by_trajnum","text":"viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" now fewer observations (rows) result removal subjects trajectories according trajnum parameter.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rm_by_trajnum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove subjects by trajectory number — rm_by_trajnum","text":"Depending analysis needs, users may want remove subjects completed certain number trajectories treatment, trial, session. mirrored = FALSE, treatment information necessary subjects removed based total number trajectories specified trajnum. mirrored = TRUE, treatment1 treatment2 parameters allow users define treatments sessions subjects must reach threshold specified trajnum argument. example, mirrored =  TRUE, setting treatment1 = \"latA\", treatment2 = \"latB\" trajnum = 5 remove subjects fewer 5 trajectories \"latA\" treatment \"latB\" treatment. treatment1 treatment2 levels within column named \"treatment\".","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rm_by_trajnum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove subjects by trajectory number — rm_by_trajnum","text":"Melissa S. Armstrong","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rm_by_trajnum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove subjects by trajectory number — rm_by_trajnum","text":"","code":"library(pathviewr)  ## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr'))  ## Clean, isolate, and label trajectories motive_full <-   motive_data %>%   clean_viewr(desired_percent = 50,               max_frame_gap = \"autodetect\",               span = 0.95) #> autodetect is an experimental feature -- please report issues.  ##Remove subjects that have not completed at least 150 trajectories: motive_rm_unmirrored <-   motive_full %>%   rm_by_trajnum(trajnum = 150) #> Joining with `by = join_by(subject)`  ## Add treatment information motive_full$treatment <- c(rep(\"latA\", 100),                            rep(\"latB\", 100),                            rep(\"latA\", 100),                            rep(\"latB\", 149))  ## Remove subjects by that have not completed at least 10 trajectories in ## both treatments motive_rm_mirrored <-   motive_full %>%   rm_by_trajnum(     trajnum = 10,     mirrored = TRUE,     treatment1 = \"latA\",     treatment2 = \"latB\"   ) #> Joining with `by = join_by(subject)`"},{"path":"https://docs.ropensci.org/pathviewr/reference/rotate_tunnel.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate a tunnel so that perches are approximately aligned — rotate_tunnel","title":"Rotate a tunnel so that perches are approximately aligned — rotate_tunnel","text":"rotation applied height axis affects tunnel length width , .e. rotation height.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rotate_tunnel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate a tunnel so that perches are approximately aligned — rotate_tunnel","text":"","code":"rotate_tunnel(   obj_name,   all_heights_min = 0.11,   all_heights_max = 0.3,   perch1_len_min = -0.06,   perch1_len_max = 0.06,   perch2_len_min = 2.48,   perch2_len_max = 2.6,   perch1_wid_min = 0.09,   perch1_wid_max = 0.31,   perch2_wid_min = 0.13,   perch2_wid_max = 0.35,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/rotate_tunnel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate a tunnel so that perches are approximately aligned — rotate_tunnel","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" passed relabel_viewr_axes() gather_tunnel_data() (structured though passed functions). all_heights_min Minimum perch height all_heights_max Maximum perch height perch1_len_min Minimum length value perch 1 perch1_len_max Maximum length value perch 1 perch2_len_min Minimum length value perch 2 perch2_len_max Maximum length value perch 2 perch1_wid_min Minimum width value perch 1 perch1_wid_max Maximum width value perch 1 perch2_wid_min Minimum width value perch 2 perch2_wid_max Maximum width value perch 2 ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rotate_tunnel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate a tunnel so that perches are approximately aligned — rotate_tunnel","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") data rotated according user specifications.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rotate_tunnel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rotate a tunnel so that perches are approximately aligned — rotate_tunnel","text":"user first estimates locations perches specifying bounds perch located. function computes center bounding box estimates midpoint perch. center point tunnel (center perch midpoints) estimated. angle perch1_center, tunnel_center_point, arbitrary point along length axis (tunnel_center_point - 1 length) estimated. angle used rotate data, length width dimensions. Height standardized (approximate) perch height; values greater 0 perch values less 0 perch level.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/rotate_tunnel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rotate a tunnel so that perches are approximately aligned — rotate_tunnel","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/rotate_tunnel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate a tunnel so that perches are approximately aligned — rotate_tunnel","text":"","code":"## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr'))  ## Clean the file. It is generally recommended to clean up to the ## \"trimmed\" step before running rotate_tunnel(). motive_trimmed <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data() %>%   trim_tunnel_outliers()  ## Now rotate the tunnel using default values motive_rotated <-   motive_trimmed %>%   rotate_tunnel()  ## The following attributes store information about ## how rotation & translation was applied attr(motive_rotated, \"rotation_degrees\") #> [1] 0.9022212 attr(motive_rotated, \"rotation_radians\") #> [1] 0.01574673 attr(motive_rotated, \"perch1_midpoint_original\") #> [1] 0.000 0.200 0.205 attr(motive_rotated, \"perch1_midpoint_current\") #> [1] -1.270157e+00  4.645589e-15  2.050000e-01 attr(motive_rotated, \"tunnel_centerpoint_original\") #> [1] 1.270 0.220 0.205 attr(motive_rotated, \"perch2_midpoint_original\") #> [1] 2.540 0.240 0.205 attr(motive_rotated, \"perch2_midpoint_current\") #> [1]  1.270157e+00 -4.645589e-15  2.050000e-01"},{"path":"https://docs.ropensci.org/pathviewr/reference/section_tunnel_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin data along a specified axis — section_tunnel_by","title":"Bin data along a specified axis — section_tunnel_by","text":"Chop data X sections (equal size) along specified axis","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/section_tunnel_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin data along a specified axis — section_tunnel_by","text":"","code":"section_tunnel_by(obj_name, axis = \"position_length\", number_of_sections = 20)"},{"path":"https://docs.ropensci.org/pathviewr/reference/section_tunnel_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin data along a specified axis — section_tunnel_by","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" axis Chosen axis, must match name column exactly number_of_sections Total number sections","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/section_tunnel_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin data along a specified axis — section_tunnel_by","text":"new column added input data object called section_id, ordered factor indicates grouping.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/section_tunnel_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bin data along a specified axis — section_tunnel_by","text":"idea bin data along specified axis, generally position_length.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/section_tunnel_by.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bin data along a specified axis — section_tunnel_by","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/section_tunnel_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin data along a specified axis — section_tunnel_by","text":"","code":"## Load data and run section_tunnel_by() test_mat <-   read_flydra_mat(system.file(\"extdata\", \"pathviewr_flydra_example_data.mat\",                              package = 'pathviewr'),                   subject_name = \"birdie_wooster\") %>%   redefine_tunnel_center(length_method = \"middle\",                          height_method = \"user-defined\",                          height_zero = 1.44) %>%   select_x_percent(desired_percent = 50) %>%   separate_trajectories(max_frame_gap = 1) %>%   get_full_trajectories(span = 0.95) %>%   section_tunnel_by(number_of_sections = 10)  ## Plot; color by section ID plot(test_mat$position_length,      test_mat$position_width,      asp = 1, col = as.factor(test_mat$section_id))"},{"path":"https://docs.ropensci.org/pathviewr/reference/select_x_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a region of interest within the tunnel — select_x_percent","title":"Select a region of interest within the tunnel — select_x_percent","text":"Select data middle X percent length tunnel","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/select_x_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a region of interest within the tunnel — select_x_percent","text":"","code":"select_x_percent(obj_name, desired_percent = 33, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/select_x_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a region of interest within the tunnel — select_x_percent","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" desired_percent Numeric, percent total length tunnel define region interest. Measured center outwards. ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/select_x_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a region of interest within the tunnel — select_x_percent","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") data outside region interest removed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/select_x_percent.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Select a region of interest within the tunnel — select_x_percent","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/select_x_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a region of interest within the tunnel — select_x_percent","text":"","code":"motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr'))  ## Clean the file. It is generally recommended to clean up to the ## \"trimmed\" step before running rotate_tunnel(). motive_rotated <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data() %>%   trim_tunnel_outliers() %>%   rotate_tunnel()  ## Now select the middle 50% of the tunnel motive_selected <-   motive_rotated %>%   select_x_percent(desired_percent = 50)  ## Compare the ranges of lengths to see the effect range(motive_rotated$position_length) #> [1] -1.235780  1.406689 range(motive_selected$position_length) #> [1] -0.6605554  0.6605359"},{"path":"https://docs.ropensci.org/pathviewr/reference/separate_trajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate rows of data into separately labeled trajectories. — separate_trajectories","title":"Separate rows of data into separately labeled trajectories. — separate_trajectories","text":"Separate rows data separately labeled trajectories.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/separate_trajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate rows of data into separately labeled trajectories. — separate_trajectories","text":"","code":"separate_trajectories(   obj_name,   max_frame_gap = 1,   frame_rate_proportion = 0.1,   frame_gap_messaging = FALSE,   frame_gap_plotting = FALSE,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/separate_trajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate rows of data into separately labeled trajectories. — separate_trajectories","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" max_frame_gap Default 1; defines largest permissible gap data new trajectory forced defined. Can either numeric value \"autodetect\". See Details . frame_rate_proportion Default 0.10; max_frame_gap =   \"autodetect\", proportion frame rate used reference (see Details). frame_gap_messaging Default FALSE; frame gaps reported console? frame_gap_plotting Default FALSE; frame gap diagnostic plots shown? ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/separate_trajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate rows of data into separately labeled trajectories. — separate_trajectories","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") new column file_sub_traj added, labels trajectories within data concatenating file name, subject name, trajectory number (separated underscores).","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/separate_trajectories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Separate rows of data into separately labeled trajectories. — separate_trajectories","text":"function designed separate rows data separately labeled trajectories. max_frame_gap parameter determines trajectories separated. numeric, function uses supplied value largest permissible gap frames new trajectory defined. max_frame_gap = \"autodetect\" used, function attempts guesstimate best value(s) max_frame_gap. performed separately subject data set, .e. many max_frame_gap values estimated unique subjects. highest possible value max_frame_gap first set proportion capture frame rate, defined frame_rate_proportion parameter (default 0.10). subject, plot total trajectory counts vs. max frame gap values created internally (can plotted via setting frame_gap_plotting = TRUE). larger max frame gaps allowed, trajectory count necessarily decrease may reach value likely represents \"best\" option. \"elbow\" plot used find estimate best max frame gap value use.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/separate_trajectories.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate rows of data into separately labeled trajectories. — separate_trajectories","text":"Vikram B. Baliga Melissa S. Armstrong","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/separate_trajectories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate rows of data into separately labeled trajectories. — separate_trajectories","text":"","code":"## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr'))  ## Clean the file. It is generally recommended to clean up to the ## \"select\" step before running select_x_percent(). motive_selected <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data() %>%   trim_tunnel_outliers() %>%   rotate_tunnel() %>%   select_x_percent(desired_percent = 50)  ## Now separate trajectories using autodetect motive_separated <-   motive_selected %>%   separate_trajectories(max_frame_gap = \"autodetect\",                         frame_rate_proportion = 0.1) #> autodetect is an experimental feature -- please report issues.  ## See new column file_sub_traj for trajectory labeling names(motive_separated) #>  [1] \"frame\"             \"time_sec\"          \"subject\"           #>  [4] \"position_length\"   \"position_width\"    \"position_height\"   #>  [7] \"rotation_length\"   \"rotation_width\"    \"rotation_height\"   #> [10] \"rotation_real\"     \"mean_marker_error\" \"traj_id\"           #> [13] \"file_sub_traj\""},{"path":"https://docs.ropensci.org/pathviewr/reference/set_traj_frametime.html","id":null,"dir":"Reference","previous_headings":"","what":"Redefine frames and time stamps on a per-trajectory basis — set_traj_frametime","title":"Redefine frames and time stamps on a per-trajectory basis — set_traj_frametime","text":"data set separated trajectories, find earliest frame trajectory set corresponding time 0. subsequent time_sec stamps computed according successive frame numbering.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/set_traj_frametime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redefine frames and time stamps on a per-trajectory basis — set_traj_frametime","text":"","code":"set_traj_frametime(obj_name)"},{"path":"https://docs.ropensci.org/pathviewr/reference/set_traj_frametime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redefine frames and time stamps on a per-trajectory basis — set_traj_frametime","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\"","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/set_traj_frametime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redefine frames and time stamps on a per-trajectory basis — set_traj_frametime","text":"viewr object (tibble data.frame attribute pathviewr_steps. New columns include traj_time (trajectory-specific time values) traj_frame (trajectory-specific frame numbering).","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/set_traj_frametime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Redefine frames and time stamps on a per-trajectory basis — set_traj_frametime","text":"separate_trajectories() get_full_trajectories() must run prior use. initial traj_time traj_frame values set 0 within trajectory.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/set_traj_frametime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Redefine frames and time stamps on a per-trajectory basis — set_traj_frametime","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/standardize_tunnel.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate and center a tunnel based on landmarks — standardize_tunnel","title":"Rotate and center a tunnel based on landmarks — standardize_tunnel","text":"Similar rotate_tunnel(); rotate center tunnel data based landmarks (specific subjects data).","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/standardize_tunnel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate and center a tunnel based on landmarks — standardize_tunnel","text":"","code":"standardize_tunnel(   obj_name,   landmark_one = \"perch1\",   landmark_two = \"perch2\",   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/standardize_tunnel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate and center a tunnel based on landmarks — standardize_tunnel","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" passed relabel_viewr_axes() gather_tunnel_data() (structured though passed functions). landmark_one Subject name first landmark landmark_two Subject name second landmark ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/standardize_tunnel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate and center a tunnel based on landmarks — standardize_tunnel","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") data rotated according positions landmarks data.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/standardize_tunnel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rotate and center a tunnel based on landmarks — standardize_tunnel","text":"center point tunnel estimated point two landmarks. therefore recommended landmark_one landmark_two objects placed opposite ends tunnel (e.g. avian flight tunnel, landmarks may perches placed extreme ends). angle landmark_one, tunnel_center_point, arbitrary point along length axis (tunnel_center_point - 1 length) estimated. angle used rotate data, length width dimensions. Height standardized average landmark height; values greater 0 landmarks values less 0 landmark level.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/standardize_tunnel.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Rotate and center a tunnel based on landmarks — standardize_tunnel","text":"position_length values landmark_one MUST less position_length values landmark_two; otherwise, rotation apply mirror-image tunnel","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/standardize_tunnel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rotate and center a tunnel based on landmarks — standardize_tunnel","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/standardize_tunnel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate and center a tunnel based on landmarks — standardize_tunnel","text":"","code":"## Example data that would work with this function are ## not included in this version of pathviewr. Please ## contact the package authors for further guidance ## should you need it."},{"path":"https://docs.ropensci.org/pathviewr/reference/trim_tunnel_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim out artifacts and other outliers from the extremes of the tunnel — trim_tunnel_outliers","title":"Trim out artifacts and other outliers from the extremes of the tunnel — trim_tunnel_outliers","text":"user provides estimates min max values data. function trims anything beyond estimates.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/trim_tunnel_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim out artifacts and other outliers from the extremes of the tunnel — trim_tunnel_outliers","text":"","code":"trim_tunnel_outliers(   obj_name,   lengths_min = 0,   lengths_max = 3,   widths_min = -0.4,   widths_max = 0.8,   heights_min = -0.2,   heights_max = 0.5,   ... )"},{"path":"https://docs.ropensci.org/pathviewr/reference/trim_tunnel_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim out artifacts and other outliers from the extremes of the tunnel — trim_tunnel_outliers","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" passed relabel_viewr_axes() gather_tunnel_data() (structured though passed functions). lengths_min Minimum length lengths_max Maximum length widths_min Minimum width widths_max Maximum width heights_min Minimum height heights_max Maximum height ... Additional arguments passed /pathviewr functions","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/trim_tunnel_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim out artifacts and other outliers from the extremes of the tunnel — trim_tunnel_outliers","text":"viewr object (tibble data.frame attribute pathviewr_steps includes \"viewr\") data outside specified ranges excluded.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/trim_tunnel_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trim out artifacts and other outliers from the extremes of the tunnel — trim_tunnel_outliers","text":"Anything supplied _min _max arguments single numeric values.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/trim_tunnel_outliers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trim out artifacts and other outliers from the extremes of the tunnel — trim_tunnel_outliers","text":"Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/trim_tunnel_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim out artifacts and other outliers from the extremes of the tunnel — trim_tunnel_outliers","text":"","code":"## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                               package = 'pathviewr'))  ## Clean the file. It is generally recommended to clean up to the ## \"gather\" step before running trim_tunnel_outliers(). motive_gathered <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data()  ## Now trim outliers using default values motive_trimmed <-   motive_gathered %>%   trim_tunnel_outliers(lengths_min = 0,                        lengths_max = 3,                        widths_min = -0.4,                        widths_max = 0.8,                        heights_min = -0.2,                        heights_max = 0.5)"},{"path":"https://docs.ropensci.org/pathviewr/reference/visualize_frame_gap_choice.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the consequence of using various max_frame_gap values — visualize_frame_gap_choice","title":"Visualize the consequence of using various max_frame_gap values — visualize_frame_gap_choice","text":"Run separate_trajectories() many different frame gaps help determine value use","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/visualize_frame_gap_choice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the consequence of using various max_frame_gap values — visualize_frame_gap_choice","text":"","code":"visualize_frame_gap_choice(obj_name, loops = 20, ...)"},{"path":"https://docs.ropensci.org/pathviewr/reference/visualize_frame_gap_choice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the consequence of using various max_frame_gap values — visualize_frame_gap_choice","text":"obj_name input viewr object; tibble data.frame attribute pathviewr_steps includes \"viewr\" loops many total frame gap entries consider. loop increase max_fram_gap argument separate_trajectories 1. ... Additional arguments","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/visualize_frame_gap_choice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the consequence of using various max_frame_gap values — visualize_frame_gap_choice","text":"plot tibble, shows total number trajectories result using specified range max_frame_gap values.","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/visualize_frame_gap_choice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize the consequence of using various max_frame_gap values — visualize_frame_gap_choice","text":"input viewr object (obj_name) likely object passed select_x_percent() step.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/pathviewr/reference/visualize_frame_gap_choice.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize the consequence of using various max_frame_gap values — visualize_frame_gap_choice","text":"Melissa S. Armstrong Vikram B. Baliga","code":""},{"path":"https://docs.ropensci.org/pathviewr/reference/visualize_frame_gap_choice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the consequence of using various max_frame_gap values — visualize_frame_gap_choice","text":"","code":"library(pathviewr)  ## Import the example Motive data included in the package motive_data <-   read_motive_csv(system.file(\"extdata\", \"pathviewr_motive_example_data.csv\",                              package = 'pathviewr'))  motive_selected <-   motive_data %>%   relabel_viewr_axes() %>%   gather_tunnel_data() %>%   trim_tunnel_outliers() %>%   rotate_tunnel() %>%   get_velocity() %>%   select_x_percent(desired_percent = 50)  visualize_frame_gap_choice(motive_selected, loops = 10)  #> [[1]] #> # A tibble: 10 × 3 #>    frame_gap_allowed trajectory_count file_id         #>                <dbl>            <dbl> <chr>           #>  1                 1               15 motive_selected #>  2                 2               13 motive_selected #>  3                 3               13 motive_selected #>  4                 4               13 motive_selected #>  5                 5               13 motive_selected #>  6                 6               13 motive_selected #>  7                 7               13 motive_selected #>  8                 8               13 motive_selected #>  9                 9               13 motive_selected #> 10                10               13 motive_selected #>  #> [[2]] #> NULL #>"},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-117","dir":"Changelog","previous_headings":"","what":"pathviewr 1.1.7","title":"pathviewr 1.1.7","text":"CRAN release: 2023-03-08 Remove dependency anomalize package electing export remove_vel_anomalies() package loaded.","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-116","dir":"Changelog","previous_headings":"","what":"pathviewr 1.1.6","title":"pathviewr 1.1.6","text":"Bug fixes remove_duplicate_frames() ensure data accidentally deleted","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-115","dir":"Changelog","previous_headings":"","what":"pathviewr 1.1.5","title":"pathviewr 1.1.5","text":"CRAN release: 2022-11-08 Bug fixes plot_by_subject() plotting functions ensure compliance ggplot2 v.3.4.0","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-114","dir":"Changelog","previous_headings":"","what":"pathviewr 1.1.4","title":"pathviewr 1.1.4","text":"gather_tunnel_data() now checks see mean marker error present data skips columns absent","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-113","dir":"Changelog","previous_headings":"","what":"pathviewr 1.1.3","title":"pathviewr 1.1.3","text":"CRAN release: 2022-08-22 get_2d_angle() now accepts numeric vectors argument return vector angles equal length","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-112","dir":"Changelog","previous_headings":"","what":"pathviewr 1.1.2","title":"pathviewr 1.1.2","text":"viewr attribute requirements largely relaxed. intended provide better flexibility using functions arbitrary points within “data analysis pipeline”. Users advised since safeguards removed, objects passed pathviewr functions checked thoroughly formatting requirements.","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-111","dir":"Changelog","previous_headings":"","what":"pathviewr 1.1.1","title":"pathviewr 1.1.1","text":"Remove viewr attribute requirements. Work progress","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-110","dir":"Changelog","previous_headings":"","what":"pathviewr 1.1.0","title":"pathviewr 1.1.0","text":"New data cleaning functions added: set_traj_frametime(), get_traj_velocities(), clean_by_span(), remove_duplicate_frames(), remove_vel_anomalies() new functions thoroughly vetted unit tests written – please use caution report issues.","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-100","dir":"Changelog","previous_headings":"","what":"pathviewr 1.0.0","title":"pathviewr 1.0.0","text":"Package accepted rOpenSci now hosted ropensci/pathviewr changes code since v0.9.5","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-095","dir":"Changelog","previous_headings":"","what":"pathviewr 0.9.5","title":"pathviewr 0.9.5","text":"Package updated incorporate feedback rOpenSci reviewers @asbonnetlebrun @marcosci, along editor @maelle. See details: ropensci/software-review#409","code":""},{"path":"https://docs.ropensci.org/pathviewr/news/index.html","id":"pathviewr-094","dir":"Changelog","previous_headings":"","what":"pathviewr 0.9.4","title":"pathviewr 0.9.4","text":"targeting submission rOpenSci near future (hopefully today). version pathviewr prepped according rOpenSci’s “Packages: Development, Maintenance, Peer Review” guide.","code":""}]
